{"_items":[{"id":"1efa0a52-89c8-6942-8dbc-a74d0d5bdbd2","familyId":"B5EFEB94C10E39E5B6378880985126F2","familyKey":"00850bee6e2c0c58ccc3c31fba9d1b4b","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"3778d0cf-475b-0773-a9e4-d4c299f460b4","name":"missing_break:logic_error|javascript","_localized":{"name":"Omitted Break Statement in Switch","otherDetail":[{"key":"description","value":"Missing break statement between cases in switch statement"},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.\n  2. The functionality of omitting a break statement could be clarified with an if statement. This method is much safer."}]}},"attributes":[{"key":"cwe","value":"CWE-484"},{"key":"coverity-events","value":"7eec15d17cd5faa17078ded04d22696bbb0de3b9791259d0c54c2ef2dffc2dc7"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Execution falls through to the next case statement or default; this might indicate a common typo."},{"key":"line-number","value":6785}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAAQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6942-8dbc-a74d0d5bdbd2?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6942-8dbc-a74d0d5bdbd2/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6942-8dbc-a74d0d5bdbd2/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-6946-8dbc-fbd08d163d21","familyId":"6C40615D00770C6FB6386B58FC2AE43E","familyKey":"030ead7ecff40715fcf6da4a7353a31c","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"913f6040-3e2f-b2dd-2b60-f222024bddf1","name":"no_effect|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"An expression is useless because it has no side effects and its result is ignored."},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-398"},{"key":"coverity-events","value":"2eb33b4a004b0ec2d3c69d762130c7eb1769d607e0ce7d4d9537298a4c25864f"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Perhaps the code was intended to affect the behavior of the program, but it does not."},{"key":"line-number","value":11090}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAAg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6946-8dbc-fbd08d163d21?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6946-8dbc-fbd08d163d21/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6946-8dbc-fbd08d163d21/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-6945-8dbc-6bdb69a02101","familyId":"6C40615D00770C6FB6386B58FC2AE43E","familyKey":"030ead7ecff40715fcf6da4a7353a31c","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"913f6040-3e2f-b2dd-2b60-f222024bddf1","name":"no_effect|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"An expression is useless because it has no side effects and its result is ignored."},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-398"},{"key":"coverity-events","value":"33e4958c954455eed8d89a4d0fad3df11325a98963859bff416adc2f0205188d"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Perhaps the code was intended to affect the behavior of the program, but it does not."},{"key":"line-number","value":11080}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAAw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6945-8dbc-6bdb69a02101?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6945-8dbc-6bdb69a02101/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6945-8dbc-6bdb69a02101/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c0d-4a7f-6546-9db9-add75a13b480","familyId":"D34996C59C60067B1EA378AB66939EEC","familyKey":"03362404-b637-457d-9e37-345f9834870a::BDSA-2024-8739::CWE-79","uploadSet":"db1d35bf-b16e-4a8a-ac15-5b94618aff5c","type":{"id":"6723d03b-c030-41af-1b8d-9607301cc908","name":"Component vulnerability","_localized":{"name":"Cross-site Scripting","otherDetail":[{"key":"description","value":"The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\n  2. Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\n\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\n\nParts of the same output document may require different encodings, which will vary depending on whether the output is in the:\n\n    * HTML body\n    * Element attributes (such as src=\"XYZ\")\n    * URIs\n    * JavaScript sections\n    * Cascading Style Sheets and style property\n\netc. Note that HTML Entity Encoding is only appropriate for the HTML body.\n\nConsult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.\n\n  3. Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n  4. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n  5. If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n  6. Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n\n  7. With Struts, write all data from form beans with the bean's filter attribute set to true.\n  8. To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n  9. Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.\n\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\n  10. When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n  11. Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n  12. When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."},{"key":"subcategory","value":"Used component contains vulnerability"}]}},"attributes":[{"key":"minor-version-upgrade-guidance-high-count","value":0},{"key":"major-version-upgrade-guidance-external-id","value":"org.apache.tomcat.embed:tomcat-embed-el:11.0.1"},{"key":"location","value":"Apache Tomcat 10.1.31"},{"key":"major-version-upgrade-guidance-high-count","value":0},{"key":"minor-version-upgrade-guidance-critical-count","value":0},{"key":"component-name","value":"Apache Tomcat"},{"key":"minor-version-upgrade-guidance-version-name","value":"10.1.33"},{"key":"cwe","value":"CWE-79"},{"key":"minor-version-upgrade-guidance-external-id","value":"org.apache.tomcat.embed:tomcat-embed-el:10.1.33"},{"key":"version","value":1},{"key":"component-origin-external-namespace","value":"maven"},{"key":"minor-version-upgrade-guidance-unscored-count","value":0},{"key":"component-id","value":"5a7e1c49-9a98-4393-b4e0-8011122bbe2f"},{"key":"disclosure-date","value":"2024-11-18T00:00+0000"},{"key":"linked-vulnerability-id","value":"BDSA-2024-8739"},{"key":"component-version-id","value":"0f34c377-f743-42a1-9aac-031b5186ef47"},{"key":"title","value":"Apache Tomcat Vulnerable to Cross-Site Scripting (XSS) via Improper Escaping of Pooled JSP Tags"},{"key":"description","value":"Apache Tomcat is vulnerable to cross-site scripting (XSS) due to improper escaping of pooled JSP tags. An attacker could exploit this in order to trick a victim into executing arbitrary web scripts in order to gain access to sensitive information such as user session cookies and authentication tokens."},{"key":"severity","value":"high"},{"key":"component-origin-id","value":"03362404-b637-457d-9e37-345f9834870a"},{"key":"major-version-upgrade-guidance-medium-count","value":0},{"key":"minor-version-upgrade-guidance-low-count","value":0},{"key":"vulnerability-source","value":"BDSA"},{"key":"major-version-upgrade-guidance-version-name","value":"11.0.1"},{"key":"technical-description","value":"This issue occurs due to a regression caused by a previous code change which improperly caused the `release` tag to only be called when using tag pooling. It was mitigated by the introduction of a missing `else` statement."},{"key":"major-version-upgrade-guidance-low-count","value":0},{"key":"overall-score","value":"9.3"},{"key":"minor-version-upgrade-guidance-medium-count","value":0},{"key":"major-version-upgrade-guidance-critical-count","value":0},{"key":"vulnerability-id","value":"CVE-2024-52318"},{"key":"component-version-name","value":"10.1.31"},{"key":"vendor-fix-date","value":"2024-10-15T00:00+0000"},{"key":"solution","value":"Fixed in:\n* [**9.0.97**](https://github.com/apache/tomcat/releases/tag/9.0.97) by [this](https://github.com/apache/tomcat/commit/9813c5dd32) commit,\n* [**10.1.33**](https://github.com/apache/tomcat/releases/tag/10.1.33) by [this](https://github.com/apache/tomcat/commit/be8e32143a) commit,\n* [**11.0.1**](https://github.com/apache/tomcat/releases/tag/11.0.1) by [this](https://github.com/apache/tomcat/commit/8d1fc4733a) commit.\n\nThe latest stable releases can be found [here](https://tomcat.apache.org/index.html)."},{"key":"published-date","value":"2024-11-18T18:11+0000"},{"key":"component-origin-external-id","value":"org.apache.tomcat.embed:tomcat-embed-el:10.1.31"},{"key":"major-version-upgrade-guidance-unscored-count","value":0},{"key":"last-modified-date","value":"2024-11-18T18:11+0000"}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAABA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c0d-4a7f-6546-9db9-add75a13b480?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"}]},{"id":"1efb84f8-4fe4-6c19-aa88-37fe0efc8107","familyId":"84E94A5CC7405302BAAA37D8187F8C81","familyKey":"04ede03a66b167ef142ae6da1cbd4613","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"85529a6fa572fdf9c88867182f7f299ac6a1a0c5ebaf7c27d02fc19565021225"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionChallenge.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":91}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAABQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c19-aa88-37fe0efc8107?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c19-aa88-37fe0efc8107/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c19-aa88-37fe0efc8107/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c0d-4a7f-6548-9db9-bb4a418c389a","familyId":"A507A2314DE22FF6A7BB7567FF7CD5A9","familyKey":"05d97f2c-e1af-42e4-8424-909db8c62745::BDSA-2024-8942::CWE-20","uploadSet":"db1d35bf-b16e-4a8a-ac15-5b94618aff5c","type":{"id":"c7217284-1fa2-500c-3cae-54bd5aba1301","name":"Component vulnerability","_localized":{"name":"Weak Input Validation","otherDetail":[{"key":"description","value":"The application stores or processes untrusted data that has not been sufficiently validated. This may be due to a complete lack of validation or validation filters whose implementation does not provide sufficient protection for the given input. An application may obtain data from various external and internal sources including databases, file servers, web services, external client requests, etc. While some of these sources may be considered trustworthy, no assumptions should be made about the validity of data whose source cannot be explicitly verified. This includes not only external data, but also data that was previously stored by the same application and data generated by other entities in the same organization."},{"key":"remediation","value":"Data that does not match an expected pattern and data that could potentially be used to execute injection attacks must be discarded or sanitized before use. Before validation is performed, inputs must be normalized to a standard encoding format. Validation should then be performed in such a way that end-users cannot tamper with or bypass the control. For example, in client/server applications (e.g. web applications, mobile applications and thick clients that make service calls over a network, etc.), validation should be performed server-side rather than client-side.\n\nAllow-list validation should be favored first over other validation techniques since any character or string not explicitly specified as part of the \"known-safe\" set of characters or values is rejected or removed by default. If a sufficient allow-list pattern cannot be determined, block-list validation can be implemented to provide some protection by filtering out or rejecting inputs that contain specified characters.\n\nIn some cases, characters considered dangerous if handled by the application in certain ways may be part of an input's expected format. Separate security controls will need to be implemented in such cases to protect against certain attacks. Consider the following examples:\n\n* Application users may have a legitimate need to include characters that, in certain combinations, can be interpreted as HTML and JavaScript code by an end user's browser. In this situation, these characters cannot be filtered; instead, the application must encode these characters for the appropriate output context.\n* The application may allow users to include single-quotes in a name field, but single-quotes may affect how SQL queries are executed if the input is concatenated to a static query string. In this case, correctly utilizing parameterized queries sufficiently protects against SQL injection attacks.\n\nIn addition to syntactic checks, data should also be checked for size and semantic correctness where possible."},{"key":"subcategory","value":"Used component contains vulnerability"}]}},"attributes":[{"key":"minor-version-upgrade-guidance-high-count","value":0},{"key":"major-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-test:6.4.1"},{"key":"location","value":"Spring Security 6.3.4"},{"key":"major-version-upgrade-guidance-high-count","value":0},{"key":"minor-version-upgrade-guidance-critical-count","value":0},{"key":"component-name","value":"Spring Security"},{"key":"minor-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"cwe","value":"CWE-20"},{"key":"minor-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-test:6.4.1"},{"key":"version","value":1},{"key":"component-origin-external-namespace","value":"maven"},{"key":"minor-version-upgrade-guidance-unscored-count","value":0},{"key":"component-id","value":"d80c013b-7862-4ea8-83e5-eb7b91623e0c"},{"key":"disclosure-date","value":"2024-11-19T00:00+0000"},{"key":"linked-vulnerability-id","value":"BDSA-2024-8942"},{"key":"component-version-id","value":"ef680c3c-6b8e-46f4-ab2d-1ea68626bb7d"},{"key":"title","value":"Spring Security Vulnerable to Authorization Bypass via 'toLowerCase' and 'toUpperCase' Locale Exceptions"},{"key":"description","value":"Spring Security is vulnerable to an authorization bypass issue due to how `Locale` dependent exceptions can impact case sensitive string comparisons.\n\nThe existence of this issue could cause some authorization rules to work incorrectly and potentially allow an attacker to bypass such rules to view and alter unintended data."},{"key":"severity","value":"medium"},{"key":"component-origin-id","value":"05d97f2c-e1af-42e4-8424-909db8c62745"},{"key":"major-version-upgrade-guidance-medium-count","value":0},{"key":"minor-version-upgrade-guidance-low-count","value":0},{"key":"vulnerability-source","value":"BDSA"},{"key":"major-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"technical-description","value":"The `String.toLowerCase()` and `String.toUpperCase()` methods are used through in various authentication and authorization components of Spring Security to perform case-sensitive comparisons. A problem can arise in how these comparisons can produce different outputs depending on the `Locale`. This oversight can potentially impact authorization rules and allow attackers to bypass measures that are in place.\n\nTo remedy this issue, the vendor has updated usage of these methods to use a combination of `Locale.ROOT` and `Locale.ENGLISH` to enforce consistency."},{"key":"major-version-upgrade-guidance-low-count","value":0},{"key":"overall-score","value":"4.8"},{"key":"minor-version-upgrade-guidance-medium-count","value":0},{"key":"major-version-upgrade-guidance-critical-count","value":0},{"key":"vulnerability-id","value":"CVE-2024-38827"},{"key":"component-version-name","value":"6.3.4"},{"key":"vendor-fix-date","value":"2024-11-15T00:00+0000"},{"key":"solution","value":"Fixed in:\n* [**5.7.14**](https://github.com/spring-projects/spring-security/releases/tag/5.7.14) by [this](https://github.com/spring-projects/spring-security/commit/0eaffb37e7) commit,\n* [**5.8.16**](https://github.com/spring-projects/spring-security/releases/tag/5.8.16) by [this](https://github.com/spring-projects/spring-security/commit/a7bf8f7cc6) commit,\n* [**6.2.8**](https://github.com/spring-projects/spring-security/releases/tag/6.2.8) and [**6.3.5**](https://github.com/spring-projects/spring-security/releases/tag/6.3.5) by [this](https://github.com/spring-projects/spring-security/commit/a8c4d6cead) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases)."},{"key":"published-date","value":"2024-11-20T15:41+0000"},{"key":"component-origin-external-id","value":"org.springframework.security:spring-security-test:6.3.4"},{"key":"major-version-upgrade-guidance-unscored-count","value":0},{"key":"last-modified-date","value":"2024-11-20T15:41+0000"}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAABg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c0d-4a7f-6548-9db9-bb4a418c389a?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"}]},{"id":"1efb5c0d-4a7f-6549-9db9-6dde9f1d1b1c","familyId":"A6EEB3E758612DCD0FC56FBD42893201","familyKey":"05d97f2c-e1af-42e4-8424-909db8c62745::BDSA-2024-8942::CWE-863","uploadSet":"db1d35bf-b16e-4a8a-ac15-5b94618aff5c","type":{"id":"6cc8f5a7-16e8-047a-34ca-31b2f0feb12a","name":"Component vulnerability","_localized":{"name":"Incorrect Authorization","otherDetail":[{"key":"description","value":"The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.\n\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.\n\n  2. Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n  3. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\n  4. For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\n\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\n\n  5. Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."},{"key":"subcategory","value":"Used component contains vulnerability"}]}},"attributes":[{"key":"minor-version-upgrade-guidance-high-count","value":0},{"key":"major-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-test:6.4.1"},{"key":"location","value":"Spring Security 6.3.4"},{"key":"major-version-upgrade-guidance-high-count","value":0},{"key":"minor-version-upgrade-guidance-critical-count","value":0},{"key":"component-name","value":"Spring Security"},{"key":"minor-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"cwe","value":"CWE-863"},{"key":"minor-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-test:6.4.1"},{"key":"version","value":1},{"key":"component-origin-external-namespace","value":"maven"},{"key":"minor-version-upgrade-guidance-unscored-count","value":0},{"key":"component-id","value":"d80c013b-7862-4ea8-83e5-eb7b91623e0c"},{"key":"disclosure-date","value":"2024-11-19T00:00+0000"},{"key":"linked-vulnerability-id","value":"BDSA-2024-8942"},{"key":"component-version-id","value":"ef680c3c-6b8e-46f4-ab2d-1ea68626bb7d"},{"key":"title","value":"Spring Security Vulnerable to Authorization Bypass via 'toLowerCase' and 'toUpperCase' Locale Exceptions"},{"key":"description","value":"Spring Security is vulnerable to an authorization bypass issue due to how `Locale` dependent exceptions can impact case sensitive string comparisons.\n\nThe existence of this issue could cause some authorization rules to work incorrectly and potentially allow an attacker to bypass such rules to view and alter unintended data."},{"key":"severity","value":"medium"},{"key":"component-origin-id","value":"05d97f2c-e1af-42e4-8424-909db8c62745"},{"key":"major-version-upgrade-guidance-medium-count","value":0},{"key":"minor-version-upgrade-guidance-low-count","value":0},{"key":"vulnerability-source","value":"BDSA"},{"key":"major-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"technical-description","value":"The `String.toLowerCase()` and `String.toUpperCase()` methods are used through in various authentication and authorization components of Spring Security to perform case-sensitive comparisons. A problem can arise in how these comparisons can produce different outputs depending on the `Locale`. This oversight can potentially impact authorization rules and allow attackers to bypass measures that are in place.\n\nTo remedy this issue, the vendor has updated usage of these methods to use a combination of `Locale.ROOT` and `Locale.ENGLISH` to enforce consistency."},{"key":"major-version-upgrade-guidance-low-count","value":0},{"key":"overall-score","value":"4.8"},{"key":"minor-version-upgrade-guidance-medium-count","value":0},{"key":"major-version-upgrade-guidance-critical-count","value":0},{"key":"vulnerability-id","value":"CVE-2024-38827"},{"key":"component-version-name","value":"6.3.4"},{"key":"vendor-fix-date","value":"2024-11-15T00:00+0000"},{"key":"solution","value":"Fixed in:\n* [**5.7.14**](https://github.com/spring-projects/spring-security/releases/tag/5.7.14) by [this](https://github.com/spring-projects/spring-security/commit/0eaffb37e7) commit,\n* [**5.8.16**](https://github.com/spring-projects/spring-security/releases/tag/5.8.16) by [this](https://github.com/spring-projects/spring-security/commit/a7bf8f7cc6) commit,\n* [**6.2.8**](https://github.com/spring-projects/spring-security/releases/tag/6.2.8) and [**6.3.5**](https://github.com/spring-projects/spring-security/releases/tag/6.3.5) by [this](https://github.com/spring-projects/spring-security/commit/a8c4d6cead) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases)."},{"key":"published-date","value":"2024-11-20T15:41+0000"},{"key":"component-origin-external-id","value":"org.springframework.security:spring-security-test:6.3.4"},{"key":"major-version-upgrade-guidance-unscored-count","value":0},{"key":"last-modified-date","value":"2024-11-20T15:41+0000"}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAABw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c0d-4a7f-6549-9db9-6dde9f1d1b1c?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"}]},{"id":"1efb84f8-4fe7-6395-aa88-4fb0327c0ce9","familyId":"9D09FFF7B5DF5A187891766223207133","familyKey":"062da22d5665ed0dfd4bc9a4db4ad434","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"4e68277fc04ce11017410b6118d7b4e119690a0ec899f0f010e32a6a79aa5d53"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTRefreshEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpointTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":100}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAACA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6395-aa88-4fb0327c0ce9?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6395-aa88-4fb0327c0ce9/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6395-aa88-4fb0327c0ce9/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e26-8dbc-67e47cb8d2ab","familyId":"CF5737B5EC48196985EE73AA2D24422E","familyKey":"0658347b8798ee4d22b8ea40e1707d12","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"d1b418e89e83dfadbd61ed1bba870ef737db80bebad6ae8d5415d01713ca70eb"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTVotesEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpointTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":80}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAACQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e26-8dbc-67e47cb8d2ab?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e26-8dbc-67e47cb8d2ab/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e26-8dbc-67e47cb8d2ab/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cd-680a-8dbc-5d833b1035c4","familyId":"0C744D4D6786EAA81A8366AA3FB90AE8","familyKey":"074248182cc13fd68eb950a942ee7417","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"a2c01c59-c620-7705-ec09-e88b6613f6cb","name":"sigma.jwt_ignored_expiration_time:jose4j|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtConsumerBuilder` ignores the expiration time by default, unless the `setRequireExpirationTime()` function is called explicitly.\nIgnoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"f5a0588408b07fc474f7c3d610fac8eaaf8f45fd46dc26ab253ba964139ac78b"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTToken.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/webwolf/jwt/JWTToken.java"},{"key":"local-effect","value":""},{"key":"line-number","value":124}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAACg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680a-8dbc-5d833b1035c4?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680a-8dbc-5d833b1035c4/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680a-8dbc-5d833b1035c4/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0b5e-3e44-6ffa-8dbc-b5a3e4ff70a0","familyId":"D77F624A9FDDB7026B8F3445B2612D81","familyKey":"07601b7ce27e753efa8ace10aefaaaee","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"bba79cfa-e857-5aa6-a07f-e7e86426c831","name":"hardcoded_credentials:password|java","_localized":{"name":"Use of Hard-coded Password","otherDetail":[{"key":"description","value":"A password is stored directly in the source code."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.\n  2. For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.\n  3. Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.\n\nUse randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\nThe first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n\nNext, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n\nFinally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-259"},{"key":"coverity-events","value":"598a575a7d209572e690551114e62382d696e5ca50d091832dcacfc543142777"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"UserServiceTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/webwolf/user/UserServiceTest.java"},{"key":"local-effect","value":"Users with access to this source code can use this password to access production services or data.  Changing this password requires changing the code and re-deploying the application."},{"key":"line-number","value":50}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAACw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e44-6ffa-8dbc-b5a3e4ff70a0?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e44-6ffa-8dbc-b5a3e4ff70a0/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e44-6ffa-8dbc-b5a3e4ff70a0/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb910f-2ba3-6751-aa88-c5e340e89d91","familyId":"C26892C776503D82881BB6A89AF58676","familyKey":"07a8127183ba748fbe38c8269b3a9f79","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"523d75e9-dc43-53b4-154d-c74678f3b4eb","name":"path_manipulation|java","_localized":{"name":"Directory Traversal","otherDetail":[{"key":"description","value":"A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."},{"key":"remediation","value":"To protect against directory traversal the application should enforce strict access controls and validate user input used to create pathnames or create indirect object references for file access. The application should also configure access to the file system on a least privilege basis to reduce the potential impact of attacks.\n\nWhenever possible, the application must restrict the use of user-supplied file paths.  When such paths are required for the application to function properly, indirect object references should be used for file access instead of accepting paths from the user. For example, consider an application that allows its users to specify a file to download from a directory. Instead of using a user-supplied filename to access the file, the application should maintain a mapping from integer keys to file names, ensuring that the supplied value is both an integer and corresponds to an actual file. In the case that a value does not have a corresponding file, the application should return a generic error message. This will often provide a safer way of referencing files that exist in the application than trying to check user input for malicious path manipulation."}]}},"attributes":[{"key":"cwe","value":"CWE-22"},{"key":"coverity-events","value":"849e6a100bff6a035f35de9b34b24ba783996c798f46c90035f11264f35dbf4f"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"ProfileUpload.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUpload.java"},{"key":"local-effect","value":"An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application."},{"key":"line-number","value":39}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAADA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6751-aa88-c5e340e89d91?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6751-aa88-c5e340e89d91/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6751-aa88-c5e340e89d91/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-695b-8dbc-21bc89ce46fa","familyId":"5DFFF0FBF67D7705125712A3BE385601","familyKey":"086b0b9c13f2c16c7b3bb88ddab041f9","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"24c0e09d-1db3-260a-f6cb-f5028e0307cc","name":"null_pointer_dereference_exception:return_value|java","_localized":{"name":"NULL Pointer Dereference","otherDetail":[{"key":"description","value":"Return value of function which returns null is dereferenced without checking"},{"key":"remediation","value":"Potential mitigations include the following:\n  1. If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\n  2. The choice could be made to use a language that is not susceptible to these issues.\n  3. Check the results of all functions that return a value and verify that the value is non-null before acting upon it.\n  4. Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\n  5. Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n  6. Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}]}},"attributes":[{"key":"cwe","value":"CWE-476"},{"key":"coverity-events","value":"49f4932c3111c1aa65a7bfe626135b40ff992844cd07e44bd13ac8460e3ac18f"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTVotesEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpointTest.java"},{"key":"local-effect","value":"If the function actually returns a null value, a NullPointerException will be thrown."},{"key":"line-number","value":186}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAADQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-695b-8dbc-21bc89ce46fa?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-695b-8dbc-21bc89ce46fa/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-695b-8dbc-21bc89ce46fa/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-695c-8dbc-e7a972dd005c","familyId":"5DFFF0FBF67D7705125712A3BE385601","familyKey":"086b0b9c13f2c16c7b3bb88ddab041f9","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"24c0e09d-1db3-260a-f6cb-f5028e0307cc","name":"null_pointer_dereference_exception:return_value|java","_localized":{"name":"NULL Pointer Dereference","otherDetail":[{"key":"description","value":"Return value of function which returns null is dereferenced without checking"},{"key":"remediation","value":"Potential mitigations include the following:\n  1. If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\n  2. The choice could be made to use a language that is not susceptible to these issues.\n  3. Check the results of all functions that return a value and verify that the value is non-null before acting upon it.\n  4. Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\n  5. Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n  6. Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}]}},"attributes":[{"key":"cwe","value":"CWE-476"},{"key":"coverity-events","value":"bdaee7e7cc26c7b38fe1be09f5912875189c9abcc738ce73599c12cc089db247"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTVotesEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpointTest.java"},{"key":"local-effect","value":"If the function actually returns a null value, a NullPointerException will be thrown."},{"key":"line-number","value":198}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAADg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-695c-8dbc-e7a972dd005c?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-695c-8dbc-e7a972dd005c/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-695c-8dbc-e7a972dd005c/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe2-65ab-aa88-e16f1a25e082","familyId":"4EC73FA38C57333FA7A36595D14330D5","familyKey":"087e252ef1680826fb531995a094e04c","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"38b33268-52c8-c4b3-2204-cbd25cabf276","name":"hardcoded_credentials:cryptographic_key|java","_localized":{"name":"Use of Hard-coded Cryptographic Key","otherDetail":[{"key":"description","value":"A cryptographic key is stored directly in the source code."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Prevention schemes mirror that of hard-coded password storage."}]}},"attributes":[{"key":"cwe","value":"CWE-321"},{"key":"coverity-events","value":"c6fe5f2cf34f63d14e2f9a12139a85dd5f098dd21493396583938087e21865a9"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTRefreshEndpoint.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpoint.java"},{"key":"local-effect","value":"Users with access to this source code can use this key to access encrypted production data.  Changing this key requires changing the code and re-deploying the application."},{"key":"line-number","value":109}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAADw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65ab-aa88-e16f1a25e082?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65ab-aa88-e16f1a25e082/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65ab-aa88-e16f1a25e082/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e40-8dbc-7dd937542409","familyId":"D1AE9A7E0681113FE9B24FAD88D3C114","familyKey":"0a521e15e8ead5d64fa0e8cfe8e7a2c2","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"45baf77e-7340-e036-84bf-e8627ab45bf3","name":"sigma.verbose_error_message:spring_boot_stacktrace_properties|text","_localized":{"name":"Generation of Error Message Containing Sensitive Information","otherDetail":[{"key":"description","value":"The Spring Boot main application server is configured to allow stack traces to be displayed in an error page. The stack traces might contain sensitive information and should not be displayed."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\n  2. Handle exceptions internally and do not display errors containing potentially sensitive information to a user.\n  3. Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.\n  4. Debugging information should not make its way into a production release.\n  5. Debugging information should not make its way into a production release.\n  6. Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\n  7. Create default error pages or messages that do not leak any information."}]}},"attributes":[{"key":"cwe","value":"CWE-209"},{"key":"coverity-events","value":"3a2d09ad9ebe028e690c696173f11de187c6b2ae2f3d945614008a17099b9600"},{"key":"severity","value":"low"},{"key":"language","value":"Text"},{"key":"filename","value":"application-webwolf.properties"},{"key":"location","value":"src/main/resources/application-webwolf.properties"},{"key":"local-effect","value":""},{"key":"line-number","value":1}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAEA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e40-8dbc-7dd937542409?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e40-8dbc-7dd937542409/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e40-8dbc-7dd937542409/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-694e-8dbc-7592fd45564d","familyId":"7CBD34ACDE7FD32CCDE967E42D2BEE72","familyKey":"0be0e40b88c5855b88b36e58ef9010c2","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"913f6040-3e2f-b2dd-2b60-f222024bddf1","name":"no_effect|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"An expression is useless because it has no side effects and its result is ignored."},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-398"},{"key":"coverity-events","value":"64b3e3a8306f979af2d8319c169d4b652f9422076b56099677dc046b1ff1a40c"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Perhaps the code was intended to affect the behavior of the program, but it does not."},{"key":"line-number","value":15272}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAEQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-694e-8dbc-7592fd45564d?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-694e-8dbc-7592fd45564d/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-694e-8dbc-7592fd45564d/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cb-6099-8dbc-e5377cccd600","familyId":"2DDAA902E25660F62690F146F54DCF5F","familyKey":"0be9978054faae3ad8bde2f0b3d73dc4","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"8e9b47bd15591788105c8ae0b9e603dd3ab901d0586f661dc72bd837a2ea8095"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"VulnerableTaskHolder.java"},{"key":"location","value":"src/main/java/org/dummy/insecure/framework/VulnerableTaskHolder.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":71}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAEg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-6099-8dbc-e5377cccd600?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-6099-8dbc-e5377cccd600/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-6099-8dbc-e5377cccd600/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63e7-aa88-eb597feb803b","familyId":"21DF16E3017B759A7D8997C357B359E7","familyKey":"0cefb50b8655375ceda4fe0e56ce001b","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"71cd38b5-69ea-31a0-1951-d73a85eda2e2","name":"weak_password_hash:weak_salt|java","_localized":{"name":"Use of a One-Way Hash with a Predictable Salt","otherDetail":[{"key":"description","value":"Hashing a password without using a random and unique salt as part of the input."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.\n\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.\n\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\n\n  2. If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password."}]}},"attributes":[{"key":"cwe","value":"CWE-760"},{"key":"coverity-events","value":"5e42a07ab45ff6c02383bee0fe13ae01b3489a46e301e01264f4035c9f3c22f1"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"HashingAssignment.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java"},{"key":"local-effect","value":"An attacker may recover individual passwords hashed this way with modest computational effort."},{"key":"line-number","value":74}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAEw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e7-aa88-eb597feb803b?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e7-aa88-eb597feb803b/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e7-aa88-eb597feb803b/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e2e-8dbc-d10f225cc1e4","familyId":"EF7610820A3C30C93EC8D59458F18C9F","familyKey":"0d2ca5f4c17ffd9c422d9223dbd91ca0","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"8b8797cc-4555-6944-add1-3e92a107021d","name":"sigma.jwt_untrusted_decode:io_jsonwebtoken|java","_localized":{"name":"Insufficient Verification of Data Authenticity","otherDetail":[{"key":"description","value":"The application uses the `io.jsonwebtoken.JwtParser` package's `parse()`, `parsePlaintextJwt()`, or `parseClaimsJwt()` method to parse a JWT without first verifying the token's signature, allowing an attacker to forge the token claims and perform attacks such as impersonating other users."},{"key":"remediation","value":"Unspecified remediation."}]}},"attributes":[{"key":"cwe","value":"CWE-345"},{"key":"coverity-events","value":"85c52dae76d07108265eb481485a299ee6ad3074a2de7efce760bb19e1561ce3"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"TokenTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/TokenTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":55}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAFA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e2e-8dbc-d10f225cc1e4?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e2e-8dbc-d10f225cc1e4/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e2e-8dbc-d10f225cc1e4/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e2f-8dbc-e55114f96ba5","familyId":"EF7610820A3C30C93EC8D59458F18C9F","familyKey":"0d2ca5f4c17ffd9c422d9223dbd91ca0","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"8b8797cc-4555-6944-add1-3e92a107021d","name":"sigma.jwt_untrusted_decode:io_jsonwebtoken|java","_localized":{"name":"Insufficient Verification of Data Authenticity","otherDetail":[{"key":"description","value":"The application uses the `io.jsonwebtoken.JwtParser` package's `parse()`, `parsePlaintextJwt()`, or `parseClaimsJwt()` method to parse a JWT without first verifying the token's signature, allowing an attacker to forge the token claims and perform attacks such as impersonating other users."},{"key":"remediation","value":"Unspecified remediation."}]}},"attributes":[{"key":"cwe","value":"CWE-345"},{"key":"coverity-events","value":"7a835a6618c72721f12d6bcd3476308ee6c990baed0e7d358e251ecba4bd2325"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"TokenTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/TokenTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":57}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAFQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e2f-8dbc-e55114f96ba5?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e2f-8dbc-e55114f96ba5/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e2f-8dbc-e55114f96ba5/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cd-6808-8dbc-3d65845ba2c1","familyId":"A9CE3B9F23A57DE0C324405322999C48","familyKey":"0d34b3a2d438b1a202b58ebb347fe6db","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"7a464135-9510-3abd-89b6-fa257cac0fcc","name":"sigma.insufficient_asymmetric_key_size:core_java|java","_localized":{"name":"Inadequate Encryption Strength","otherDetail":[{"key":"description","value":"The application uses an asymmetric algorithm with insufficient key size, making the ciphertext data vulnerable to brute force attacks."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Use an encryption scheme that is currently considered to be strong by experts in the field."}]}},"attributes":[{"key":"cwe","value":"CWE-326"},{"key":"coverity-events","value":"c4f5783609964732b4b42d52dedd8fd633f5e6bf21b6329053951f8dfe194973"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"CryptoUtil.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/cryptography/CryptoUtil.java"},{"key":"local-effect","value":""},{"key":"line-number","value":38}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAFg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6808-8dbc-3d65845ba2c1?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6808-8dbc-3d65845ba2c1/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6808-8dbc-3d65845ba2c1/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-6951-8dbc-f12ea16eb599","familyId":"CA40F03D38C1A04061F3EFCA5C465379","familyKey":"1049fa7bf507d884ad083649d5d0f7e2","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"a3794adf-63bf-5007-566f-a22be39af578","name":"null_pointer_dereference_exception:return_value|javascript","_localized":{"name":"NULL Pointer Dereference","otherDetail":[{"key":"description","value":"Using the return value of a function that can return null or undefined without checking it for null or undefined."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\n  2. The choice could be made to use a language that is not susceptible to these issues.\n  3. Check the results of all functions that return a value and verify that the value is non-null before acting upon it.\n  4. Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\n  5. Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n  6. Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}]}},"attributes":[{"key":"cwe","value":"CWE-476"},{"key":"coverity-events","value":"a7d21a14603879242b1e565b9497593024c906da2857c171d6268eb08f4abf75"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"If the function returns a null or undefined value, this code will cause an exception such as a TypeError."},{"key":"line-number","value":13415}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAFw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6951-8dbc-f12ea16eb599?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6951-8dbc-f12ea16eb599/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6951-8dbc-f12ea16eb599/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-6952-8dbc-a18fa40ecf03","familyId":"CA40F03D38C1A04061F3EFCA5C465379","familyKey":"1049fa7bf507d884ad083649d5d0f7e2","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"a3794adf-63bf-5007-566f-a22be39af578","name":"null_pointer_dereference_exception:return_value|javascript","_localized":{"name":"NULL Pointer Dereference","otherDetail":[{"key":"description","value":"Using the return value of a function that can return null or undefined without checking it for null or undefined."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\n  2. The choice could be made to use a language that is not susceptible to these issues.\n  3. Check the results of all functions that return a value and verify that the value is non-null before acting upon it.\n  4. Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\n  5. Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n  6. Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}]}},"attributes":[{"key":"cwe","value":"CWE-476"},{"key":"coverity-events","value":"02b052787cc12859e7f82136df72880af38722396e3678f8376e20ad48159a0d"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"If the function returns a null or undefined value, this code will cause an exception such as a TypeError."},{"key":"line-number","value":13435}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAGA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6952-8dbc-a18fa40ecf03?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6952-8dbc-a18fa40ecf03/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6952-8dbc-a18fa40ecf03/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cb-60c5-8dbc-ef961aa8b634","familyId":"4AF325679E2E880838A8FECAC542B897","familyKey":"11e1366b63a07f23d9f9155695a60764","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"d565884f-6331-5e67-2eaa-f227f8a1256e","name":"sigma.container_running_as_root:dockerfile|text","_localized":{"name":"Improper Privilege Management","otherDetail":[{"key":"description","value":"The Docker container is configured to run as the root user."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."}]}},"attributes":[{"key":"cwe","value":"CWE-269"},{"key":"coverity-events","value":"b7cc839e18305708190d04a7bd272b6d5097caa9c095221567fcdb955e5d6e9f"},{"key":"severity","value":"low"},{"key":"language","value":"Text"},{"key":"filename","value":"Dockerfile_desktop"},{"key":"location","value":"Dockerfile_desktop"},{"key":"local-effect","value":""},{"key":"line-number","value":1}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAGQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c5-8dbc-ef961aa8b634?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c5-8dbc-ef961aa8b634/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c5-8dbc-ef961aa8b634/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cd-6811-8dbc-8dab47878cdf","familyId":"08A6793677642A4BD0A5296DE501A710","familyKey":"1645450dfc37183719934c5b58c17e56","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"f77fef6c16bbd26bff89e56d80c087309db7b07e5c6748e119e8b092e0cd6d46"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTSecretKeyEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTSecretKeyEndpointTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":106}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAGg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6811-8dbc-8dab47878cdf?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6811-8dbc-8dab47878cdf/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6811-8dbc-8dab47878cdf/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c35-f907-6f0e-9db9-9f9497844692","familyId":"8566312EFA678B10EE4606B70B875C11","familyKey":"166f9cf734e4ff6e2c9cdda801022e2b","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"ccd2e9b4-23f2-6e51-bc3c-89b43e75582c","name":"sigma.hardcoded_secret:pattern_medium|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"0923d6c181eff2a4e1b0225064981b477a969503dbd69d2acdda45bf289bd2c1"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTTokenTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/webwolf/jwt/JWTTokenTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":55}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAGw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0e-9db9-9f9497844692?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0e-9db9-9f9497844692/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efb5c35-f907-6f0b-9db9-0f1bec9d71e5","familyId":"C0D60C7FA5827D37DF55F7BDE5E9BD1E","familyKey":"184702ab5ee0bdda3f450353f0271b27","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"0fe33e31a20c0bc0aa7df6c3c6e8d674a3778bf25a7af6e5132c2d7dfd60c332"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"UserServiceTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/webwolf/user/UserServiceTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":49}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAHA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0b-9db9-0f1bec9d71e5?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0b-9db9-0f1bec9d71e5/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efa0a52-89cd-680f-8dbc-c19a2c77be6a","familyId":"8264C718384EC85BEAE2E2866DEFA340","familyKey":"18754dc8ca5f1c796c19501f4a8a1ef4","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"287a6ebf844dbb344e00e98d0e980be128912af5fb4d21fd2aed2488f8cca7cb"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTSecretKeyEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTSecretKeyEndpointTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":81}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAHQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680f-8dbc-c19a2c77be6a?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680f-8dbc-c19a2c77be6a/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680f-8dbc-c19a2c77be6a/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c0d-4a7f-6544-9db9-5d83352b3f7f","familyId":"DD8AA771E83BDAFCA681ADBED735E8CA","familyKey":"194d29fc-4f61-41b4-b373-adc18d7b1c9b::BDSA-2024-8942::CWE-20","uploadSet":"db1d35bf-b16e-4a8a-ac15-5b94618aff5c","type":{"id":"c7217284-1fa2-500c-3cae-54bd5aba1301","name":"Component vulnerability","_localized":{"name":"Weak Input Validation","otherDetail":[{"key":"description","value":"The application stores or processes untrusted data that has not been sufficiently validated. This may be due to a complete lack of validation or validation filters whose implementation does not provide sufficient protection for the given input. An application may obtain data from various external and internal sources including databases, file servers, web services, external client requests, etc. While some of these sources may be considered trustworthy, no assumptions should be made about the validity of data whose source cannot be explicitly verified. This includes not only external data, but also data that was previously stored by the same application and data generated by other entities in the same organization."},{"key":"remediation","value":"Data that does not match an expected pattern and data that could potentially be used to execute injection attacks must be discarded or sanitized before use. Before validation is performed, inputs must be normalized to a standard encoding format. Validation should then be performed in such a way that end-users cannot tamper with or bypass the control. For example, in client/server applications (e.g. web applications, mobile applications and thick clients that make service calls over a network, etc.), validation should be performed server-side rather than client-side.\n\nAllow-list validation should be favored first over other validation techniques since any character or string not explicitly specified as part of the \"known-safe\" set of characters or values is rejected or removed by default. If a sufficient allow-list pattern cannot be determined, block-list validation can be implemented to provide some protection by filtering out or rejecting inputs that contain specified characters.\n\nIn some cases, characters considered dangerous if handled by the application in certain ways may be part of an input's expected format. Separate security controls will need to be implemented in such cases to protect against certain attacks. Consider the following examples:\n\n* Application users may have a legitimate need to include characters that, in certain combinations, can be interpreted as HTML and JavaScript code by an end user's browser. In this situation, these characters cannot be filtered; instead, the application must encode these characters for the appropriate output context.\n* The application may allow users to include single-quotes in a name field, but single-quotes may affect how SQL queries are executed if the input is concatenated to a static query string. In this case, correctly utilizing parameterized queries sufficiently protects against SQL injection attacks.\n\nIn addition to syntactic checks, data should also be checked for size and semantic correctness where possible."},{"key":"subcategory","value":"Used component contains vulnerability"}]}},"attributes":[{"key":"minor-version-upgrade-guidance-high-count","value":0},{"key":"major-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-web:6.4.1"},{"key":"location","value":"Spring Security 6.3.4"},{"key":"major-version-upgrade-guidance-high-count","value":0},{"key":"minor-version-upgrade-guidance-critical-count","value":0},{"key":"component-name","value":"Spring Security"},{"key":"minor-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"cwe","value":"CWE-20"},{"key":"minor-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-web:6.4.1"},{"key":"version","value":1},{"key":"component-origin-external-namespace","value":"maven"},{"key":"minor-version-upgrade-guidance-unscored-count","value":0},{"key":"component-id","value":"d80c013b-7862-4ea8-83e5-eb7b91623e0c"},{"key":"disclosure-date","value":"2024-11-19T00:00+0000"},{"key":"linked-vulnerability-id","value":"BDSA-2024-8942"},{"key":"component-version-id","value":"ef680c3c-6b8e-46f4-ab2d-1ea68626bb7d"},{"key":"title","value":"Spring Security Vulnerable to Authorization Bypass via 'toLowerCase' and 'toUpperCase' Locale Exceptions"},{"key":"description","value":"Spring Security is vulnerable to an authorization bypass issue due to how `Locale` dependent exceptions can impact case sensitive string comparisons.\n\nThe existence of this issue could cause some authorization rules to work incorrectly and potentially allow an attacker to bypass such rules to view and alter unintended data."},{"key":"severity","value":"medium"},{"key":"component-origin-id","value":"194d29fc-4f61-41b4-b373-adc18d7b1c9b"},{"key":"major-version-upgrade-guidance-medium-count","value":0},{"key":"minor-version-upgrade-guidance-low-count","value":0},{"key":"vulnerability-source","value":"BDSA"},{"key":"major-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"technical-description","value":"The `String.toLowerCase()` and `String.toUpperCase()` methods are used through in various authentication and authorization components of Spring Security to perform case-sensitive comparisons. A problem can arise in how these comparisons can produce different outputs depending on the `Locale`. This oversight can potentially impact authorization rules and allow attackers to bypass measures that are in place.\n\nTo remedy this issue, the vendor has updated usage of these methods to use a combination of `Locale.ROOT` and `Locale.ENGLISH` to enforce consistency."},{"key":"major-version-upgrade-guidance-low-count","value":0},{"key":"overall-score","value":"4.8"},{"key":"minor-version-upgrade-guidance-medium-count","value":0},{"key":"major-version-upgrade-guidance-critical-count","value":0},{"key":"vulnerability-id","value":"CVE-2024-38827"},{"key":"component-version-name","value":"6.3.4"},{"key":"vendor-fix-date","value":"2024-11-15T00:00+0000"},{"key":"solution","value":"Fixed in:\n* [**5.7.14**](https://github.com/spring-projects/spring-security/releases/tag/5.7.14) by [this](https://github.com/spring-projects/spring-security/commit/0eaffb37e7) commit,\n* [**5.8.16**](https://github.com/spring-projects/spring-security/releases/tag/5.8.16) by [this](https://github.com/spring-projects/spring-security/commit/a7bf8f7cc6) commit,\n* [**6.2.8**](https://github.com/spring-projects/spring-security/releases/tag/6.2.8) and [**6.3.5**](https://github.com/spring-projects/spring-security/releases/tag/6.3.5) by [this](https://github.com/spring-projects/spring-security/commit/a8c4d6cead) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases)."},{"key":"published-date","value":"2024-11-20T15:41+0000"},{"key":"component-origin-external-id","value":"org.springframework.security:spring-security-web:6.3.4"},{"key":"major-version-upgrade-guidance-unscored-count","value":0},{"key":"last-modified-date","value":"2024-11-20T15:41+0000"}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAHg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c0d-4a7f-6544-9db9-5d83352b3f7f?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"}]},{"id":"1efb5c0d-4a7f-6545-9db9-9b7fae8a8271","familyId":"1567ECBB7532F44A4DD99DBBF2137084","familyKey":"194d29fc-4f61-41b4-b373-adc18d7b1c9b::BDSA-2024-8942::CWE-863","uploadSet":"db1d35bf-b16e-4a8a-ac15-5b94618aff5c","type":{"id":"6cc8f5a7-16e8-047a-34ca-31b2f0feb12a","name":"Component vulnerability","_localized":{"name":"Incorrect Authorization","otherDetail":[{"key":"description","value":"The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.\n\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.\n\n  2. Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n  3. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\n  4. For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\n\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\n\n  5. Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."},{"key":"subcategory","value":"Used component contains vulnerability"}]}},"attributes":[{"key":"minor-version-upgrade-guidance-high-count","value":0},{"key":"major-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-web:6.4.1"},{"key":"location","value":"Spring Security 6.3.4"},{"key":"major-version-upgrade-guidance-high-count","value":0},{"key":"minor-version-upgrade-guidance-critical-count","value":0},{"key":"component-name","value":"Spring Security"},{"key":"minor-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"cwe","value":"CWE-863"},{"key":"minor-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-web:6.4.1"},{"key":"version","value":1},{"key":"component-origin-external-namespace","value":"maven"},{"key":"minor-version-upgrade-guidance-unscored-count","value":0},{"key":"component-id","value":"d80c013b-7862-4ea8-83e5-eb7b91623e0c"},{"key":"disclosure-date","value":"2024-11-19T00:00+0000"},{"key":"linked-vulnerability-id","value":"BDSA-2024-8942"},{"key":"component-version-id","value":"ef680c3c-6b8e-46f4-ab2d-1ea68626bb7d"},{"key":"title","value":"Spring Security Vulnerable to Authorization Bypass via 'toLowerCase' and 'toUpperCase' Locale Exceptions"},{"key":"description","value":"Spring Security is vulnerable to an authorization bypass issue due to how `Locale` dependent exceptions can impact case sensitive string comparisons.\n\nThe existence of this issue could cause some authorization rules to work incorrectly and potentially allow an attacker to bypass such rules to view and alter unintended data."},{"key":"severity","value":"medium"},{"key":"component-origin-id","value":"194d29fc-4f61-41b4-b373-adc18d7b1c9b"},{"key":"major-version-upgrade-guidance-medium-count","value":0},{"key":"minor-version-upgrade-guidance-low-count","value":0},{"key":"vulnerability-source","value":"BDSA"},{"key":"major-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"technical-description","value":"The `String.toLowerCase()` and `String.toUpperCase()` methods are used through in various authentication and authorization components of Spring Security to perform case-sensitive comparisons. A problem can arise in how these comparisons can produce different outputs depending on the `Locale`. This oversight can potentially impact authorization rules and allow attackers to bypass measures that are in place.\n\nTo remedy this issue, the vendor has updated usage of these methods to use a combination of `Locale.ROOT` and `Locale.ENGLISH` to enforce consistency."},{"key":"major-version-upgrade-guidance-low-count","value":0},{"key":"overall-score","value":"4.8"},{"key":"minor-version-upgrade-guidance-medium-count","value":0},{"key":"major-version-upgrade-guidance-critical-count","value":0},{"key":"vulnerability-id","value":"CVE-2024-38827"},{"key":"component-version-name","value":"6.3.4"},{"key":"vendor-fix-date","value":"2024-11-15T00:00+0000"},{"key":"solution","value":"Fixed in:\n* [**5.7.14**](https://github.com/spring-projects/spring-security/releases/tag/5.7.14) by [this](https://github.com/spring-projects/spring-security/commit/0eaffb37e7) commit,\n* [**5.8.16**](https://github.com/spring-projects/spring-security/releases/tag/5.8.16) by [this](https://github.com/spring-projects/spring-security/commit/a7bf8f7cc6) commit,\n* [**6.2.8**](https://github.com/spring-projects/spring-security/releases/tag/6.2.8) and [**6.3.5**](https://github.com/spring-projects/spring-security/releases/tag/6.3.5) by [this](https://github.com/spring-projects/spring-security/commit/a8c4d6cead) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases)."},{"key":"published-date","value":"2024-11-20T15:41+0000"},{"key":"component-origin-external-id","value":"org.springframework.security:spring-security-web:6.3.4"},{"key":"major-version-upgrade-guidance-unscored-count","value":0},{"key":"last-modified-date","value":"2024-11-20T15:41+0000"}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAHw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c0d-4a7f-6545-9db9-9b7fae8a8271?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"}]},{"id":"1efa0a52-89cd-6810-8dbc-4512246f498c","familyId":"872A8586FA32BEF81D6388E579CED7C9","familyKey":"19f4d16de4f6a254f5389bf4facab9f8","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"dd1f476105aca0d29d492ca3df8ebdf243d703ac15b05f93184ad5f42085fc89"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTSecretKeyEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTSecretKeyEndpointTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":93}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAIA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6810-8dbc-4512246f498c?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6810-8dbc-4512246f498c/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-6810-8dbc-4512246f498c/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c35-f907-6ef8-9db9-a1b682f8f4e0","familyId":"EA281FDE8DF5CE5C1672ED073608545A","familyKey":"1b8b8f5e63ac8a92503dccd5ace1067a","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"987f6bed7a6d5fe3c7b15887dfe95c59f3f6635495a2b42c56032418ce38d060"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"SecurePasswords.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/securepasswords/SecurePasswords.java"},{"key":"local-effect","value":""},{"key":"line-number","value":43}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAIQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6ef8-9db9-a1b682f8f4e0?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6ef8-9db9-a1b682f8f4e0/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efa0a52-89c8-694a-8dbc-8fa04036d726","familyId":"7A1C00300F0A757BAEEA157AFD60C792","familyKey":"1d889c3ac92af871894523bc0edee769","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"913f6040-3e2f-b2dd-2b60-f222024bddf1","name":"no_effect|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"An expression is useless because it has no side effects and its result is ignored."},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-398"},{"key":"coverity-events","value":"3afa3b7c68d348cc142e48e4763f411c4dfcb6ce8581c1e0abda5468d82c1e7b"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Perhaps the code was intended to affect the behavior of the program, but it does not."},{"key":"line-number","value":325}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAIg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-694a-8dbc-8fa04036d726?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-694a-8dbc-8fa04036d726/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-694a-8dbc-8fa04036d726/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e37-8dbc-497d40a6da01","familyId":"8A03EBBB42EE6A3C01D3E176F3CF9BCD","familyKey":"1ea516a0d8ce5c6fecef075229f5467a","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"937deb99-e8b6-e374-01b2-1263230ed74d","name":"sigma.missing_tls:spring_boot_datasource_properties|text","_localized":{"name":"Cleartext Transmission of Sensitive Information","otherDetail":[{"key":"description","value":"The Spring Boot application's data source is configured to disable SSL by setting the `spring.datasource.url` attribute to a value without `useSSL=true`. Thus, sensitive data transmitted over an insecure communication channel could be read and modified by attackers."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Encrypt the data with a reliable encryption scheme before transmitting.\n  2. When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.\n  3. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\n  4. Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols."}]}},"attributes":[{"key":"cwe","value":"CWE-319"},{"key":"coverity-events","value":"ff1d15ffdb526fc2181522f1b1f395179e8c4fb6add0330b98b9a5b98fdeb004"},{"key":"severity","value":"low"},{"key":"language","value":"Text"},{"key":"filename","value":"application-webgoat-test.properties"},{"key":"location","value":"src/test/resources/application-webgoat-test.properties"},{"key":"local-effect","value":""},{"key":"line-number","value":3}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAIw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e37-8dbc-497d40a6da01?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e37-8dbc-497d40a6da01/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e37-8dbc-497d40a6da01/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63e8-aa88-271b18a2b15f","familyId":"BE6C482E75C695212CCE5A31BA7DE796","familyKey":"205aa49a66e5b1ecd92d80d70726e467","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"97e3bd0b-afea-b5a7-2599-71041c47cc21","name":"weak_password_hash:weak_hash_no_salt|java","_localized":{"name":"Unsalted Password Hashes","otherDetail":[{"key":"description","value":"Hashing a password using a scheme that is not computationally intensive, and without using any salt as part of the input."},{"key":"remediation","value":"For defense-in-depth, passwords should be salted and hashed to prevent an attacker from gaining access to clear-text passwords in the event that the database table containing user passwords is compromised.\n\nThe first step toward securely storing passwords involves generating a secure random, fixed-length, at least 32 bits, token (or \"salt\") when the clear-text password is about to be stored in the database.\n\n```\nSALT = rand(32bits)\n```\n\nAdditionally, consider larger salt (64 bits) if you have a very large user base to avoid salt collisions.\n\nThe salt value and clear-text password should then be supplied as inputs to a cryptographically secure one-way key derivation function. A key derivation function derives one or more secret keys from a secret value such as a master key or other known information such as a password or passphrase using a pseudo-random function. Some examples include PBKDF#2, BALLOON, bcrypt, scrypt, and Argon2. Bcrypt and Argon2 have salts built-in to prevent rainbow table attacks. The key derivation function must use an approved one-way function such as Keyed Hash Message Authentication Code (HMAC), any approved hash function in NIST SP 800-107 Revision 1, SHA-3, CMAC, KMAC, or cSHAKE.\n\n```\nOUT = PBKDF2WithHmacSHA3-512(KEY, PW, SALT, WORK FACTOR) + \":\" + SALT;\n```\n\nImproved security from MAC is contingent upon the proper key management of the MAC key. MAC key must be protected like any other private key using established key management practices, including secure key generation and storage. Besides, multiple key versions need to be supported when rotating keys to account for the password hash change using a new key.\n\nAdditionally, developers must specify a cost or \"work factor\" to set the number of iterations of the adaptive hash function. This parameter's value changes depending on the chosen function but should be tuned to execute in 1/100th of a second (lower/higher depending on peak user load requirements) in the production environment. The work factor should also be tweaked every 1-2 years as computers get faster. Once the password is salted and hashed, the hash and plaintext salt can be stored in the database alongside the username.\n\nNote: once passwords are salted and hashed in the database, any functionality which involves user credentials needs to be modified to account for the change in how passwords are stored. When a user logs in, the application needs to take the supplied clear-text password and associated salt, then compute the hash using key derivation function and compare the resulting hash with the hash stored for that user. If the hashes match, the supplied password matches the one the user-submitted initially."}]}},"attributes":[{"key":"cwe","value":"CWE-759"},{"key":"coverity-events","value":"b5800014491013039af3f26cb811ed25c01d4b580190e837582d798830b65aa6"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"HashingAssignment.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java"},{"key":"local-effect","value":"An attacker may recover a large number of passwords hashed this way with modest computational effort."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAJA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e8-aa88-271b18a2b15f?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e8-aa88-271b18a2b15f/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e8-aa88-271b18a2b15f/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cd-680d-8dbc-0d7abf15ec11","familyId":"C42AD9530BA0EA5B9DBA0D074E0C24C9","familyKey":"20718601991793cb84132012006cebbf","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"8c753efea1c55f6222581dcb98c494cb4321083b12cb88c81d0508424334d1c8"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"TokenTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/TokenTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":48}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAJQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680d-8dbc-0d7abf15ec11?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680d-8dbc-0d7abf15ec11/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cd-680d-8dbc-0d7abf15ec11/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63b5-aa88-711c1a83f557","familyId":"A1E421676EBE09EC3B70646CB6C99424","familyKey":"20a78f378f64770db5a576016ccb2975","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"7294a983-8fc2-269e-81c0-cf763d5dfd26","name":"sql_injection:sink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"8d913a29e6ef7cc65ca66f8f2a497d24a540c67c6544dc7b562a3d43d7159992"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlOnlyInputValidation.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidation.java"},{"key":"local-effect","value":"A user can change the intent of the SQL query, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":53}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAJg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b5-aa88-711c1a83f557?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b5-aa88-711c1a83f557/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b5-aa88-711c1a83f557/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63b9-aa88-63c72cf5b2c5","familyId":"F60BD7D320AD7F08A01A54610662442E","familyKey":"21c1c61dca09dbde0b7957d1baf9d7fb","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"7294a983-8fc2-269e-81c0-cf763d5dfd26","name":"sql_injection:sink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"52b380636262f4c9bda3faa77a5fc48f17e6de67e4533efd10382e804d960d8f"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5.java"},{"key":"local-effect","value":"A user can change the intent of the SQL query, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":75}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAJw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b9-aa88-63c72cf5b2c5?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b9-aa88-63c72cf5b2c5/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b9-aa88-63c72cf5b2c5/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63de-aa88-f9e39f332b3d","familyId":"0A750E76F72EB01FDE73182494BFFE1D","familyKey":"24fef6e60861326953ff0ba902b13c7b","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"59000ef4-704e-ce73-2751-001bf9457b41","name":"unsafe_deserialization|java","_localized":{"name":"Insecure Object Deserialization","otherDetail":[{"key":"description","value":"A user-controllable string is deserialized."},{"key":"remediation","value":"The application should avoid using object deserialization for data shared outside a trusted system.\n\nThe following things should be taken into consideration for remediation of this issue:\n\n* Sensitive data should never be included without in serialized state that is sent to a client. If sensitive data is included in serialized state, it must be encrypted with a key that is only available to authorized entities for decrypting the sensitive data. \n* Serialized data must be protected from unauthorized modification, i.e., it should use some form of integrity protection such as a keyed MAC or being digitally signed.\n* Data entering via an untrusted source (e.g., client) should never be deserialized. If this is not possible, then the application must explicitly specify and enforce which classes that should be allowed to be deserialized. It is important to note that it is not sufficient to add validation checks within the class that the application expects to deserialize, as an attacker can create a serialized object of any class they choose, which would then bypass such validation. It is important to strictly control which classes are allowed to be deserialized.\n\nIf using Java, it is recommended to use a run-time \"agent\" such as notsoserial (https://github.com/kantega/notsoserial) to specify and control which classes that should be allowed to be deserialized. Furthermore, it is strongly recommended to use the latest hardened JDK and ensure all third-party libraries, such as Apache Commons Collections, are updated."}]}},"attributes":[{"key":"cwe","value":"CWE-502"},{"key":"coverity-events","value":"e1eae0da62ed5c92e34c3ed748c6aa8847674f44fbbec3f56cc516de2419a35b"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"VulnerableComponentsLesson.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/vulnerablecomponents/VulnerableComponentsLesson.java"},{"key":"local-effect","value":"An attacker can instantiate arbitrary classes, possibly resulting in a denial of service or potentially unintended code execution."},{"key":"line-number","value":60}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAKA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63de-aa88-f9e39f332b3d?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63de-aa88-f9e39f332b3d/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63de-aa88-f9e39f332b3d/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb910f-2ba3-6777-aa88-e5b97eedcce2","familyId":"A1C10AECA6787A0B32F624AB66E33F82","familyKey":"2524822068cf8c65987baf4b0c522d6d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"d4dedc68-339d-6952-3162-c1c70911fd9d","name":"sigma.hardcoded_secret:file|text","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in a file that is persisted to the code repository. Any user with access to the code repository may obtain and use the secret to access restricted resources."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"5972db68a10bfbf14a4a90d96d2db8be417efa2e75264f52ea550210289e0083"},{"key":"severity","value":"medium"},{"key":"language","value":"Text"},{"key":"filename","value":"goatkeystore.pkcs12"},{"key":"location","value":"src/main/resources/goatkeystore.pkcs12"},{"key":"local-effect","value":""},{"key":"line-number","value":1}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAKQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6777-aa88-e5b97eedcce2?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6777-aa88-e5b97eedcce2/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efb910f-2ba5-6edd-aa88-5fe0a1a0619d","familyId":"844DF51A7E4E1A5A152793B79940E8B0","familyKey":"2542da976bc5c675d8139a9335232a2f","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"41837a06eb8a9b8d671933f4bee595d41ed394feb272bec50d0dc505974dcba6"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"Assignment5.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/challenges/challenge5/Assignment5.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":61}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAKg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba5-6edd-aa88-5fe0a1a0619d?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba5-6edd-aa88-5fe0a1a0619d/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba5-6edd-aa88-5fe0a1a0619d/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cb-60c3-8dbc-4f5d7d07ad45","familyId":"FF6042DED14372B6E859C6874BF9CCCB","familyKey":"2a1661e98c30ca3bf564ad3b6ddfd94f","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"19dc13c5-d76a-7469-2c56-59510ecb2408","name":"sensitive_data_leak:cleartext_in_database|java","_localized":{"name":"Cleartext Storage in a File or on Disk","otherDetail":[{"key":"description","value":"Storing unencrypted sensitive data to a database."},{"key":"remediation","value":"Unspecified remediation."}]}},"attributes":[{"key":"cwe","value":"CWE-313"},{"key":"coverity-events","value":"3d357c31990e1988a5ed2b34c0960acb696b2dac782aac0f8fdd07b40e9391d1"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"UserRepositoryTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/container/users/UserRepositoryTest.java"},{"key":"local-effect","value":"An attacker with access to the database can read this sensitive data."},{"key":"line-number","value":18}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAKw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c3-8dbc-4f5d7d07ad45?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c3-8dbc-4f5d7d07ad45/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c3-8dbc-4f5d7d07ad45/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c35-f907-6f02-9db9-d727f4d5ff82","familyId":"C37FE86941CB0DEA86428996BF26C253","familyKey":"2e2e614437ad9b36737eac5aae30cb58","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"2b995c20016884e103769b3515173476b39f2748e5dad73bdd405d49ecebf04d"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"UserValidatorTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/container/users/UserValidatorTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":51}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAALA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f02-9db9-d727f4d5ff82?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f02-9db9-d727f4d5ff82/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efa0a52-89cb-60c2-8dbc-575557ffec36","familyId":"8CCAF01405BB201D1857508FD642D6C9","familyKey":"2fdd65af8aa1d26a3ebac301b308145a","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"19dc13c5-d76a-7469-2c56-59510ecb2408","name":"sensitive_data_leak:cleartext_in_database|java","_localized":{"name":"Cleartext Storage in a File or on Disk","otherDetail":[{"key":"description","value":"Storing unencrypted sensitive data to a database."},{"key":"remediation","value":"Unspecified remediation."}]}},"attributes":[{"key":"cwe","value":"CWE-313"},{"key":"coverity-events","value":"b7264c2f84903daa208daa56ec528565a60d4b543d69a7ee3321692cc52b0665"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"UserService.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/container/users/UserService.java"},{"key":"local-effect","value":"An attacker with access to the database can read this sensitive data."},{"key":"line-number","value":42}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAALQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c2-8dbc-575557ffec36?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c2-8dbc-575557ffec36/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c2-8dbc-575557ffec36/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e44-8dbc-032a000d56d6","familyId":"EC1A63D9F8F87A4947D3BABA49FF9798","familyKey":"3152efec8c1d7c5322c49bebb7d177c5","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"934a4f7e-6920-9ae8-0d5f-939f1e65634f","name":"sigma.weak_password_hash:spring_security_code|java","_localized":{"name":"Weak Encoding for Password","otherDetail":[{"key":"description","value":"Spring Security framework uses weak hashing algorithm in the PasswordEncoder interface. Weak hashing algorithm does not adequately protect the password. In case of a data leak from a password storage, attackers will easily be able to obtain the original password values."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Passwords should be encrypted with keys that are at least 128 bits in length for adequate security."}]}},"attributes":[{"key":"cwe","value":"CWE-261"},{"key":"coverity-events","value":"7b673542dad522c0d12eefe693661339b03b98be72f2ffead7161102d0d5b1f7"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"WebSecurityConfig.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/webwolf/WebSecurityConfig.java"},{"key":"local-effect","value":""},{"key":"line-number","value":103}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAALg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e44-8dbc-032a000d56d6?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e44-8dbc-032a000d56d6/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e44-8dbc-032a000d56d6/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-639c-aa88-9dcff5bc5338","familyId":"ABA947A9A8357DE6B83EE3F8BD8E4163","familyKey":"33136124b92b462b650fa119f11aa8d6","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"8b8797cc-4555-6944-add1-3e92a107021d","name":"sigma.jwt_untrusted_decode:io_jsonwebtoken|java","_localized":{"name":"Insufficient Verification of Data Authenticity","otherDetail":[{"key":"description","value":"The application uses the `io.jsonwebtoken.JwtParser` package's `parse()`, `parsePlaintextJwt()`, or `parseClaimsJwt()` method to parse a JWT without first verifying the token's signature, allowing an attacker to forge the token claims and perform attacks such as impersonating other users."},{"key":"remediation","value":"Unspecified remediation."}]}},"attributes":[{"key":"cwe","value":"CWE-345"},{"key":"coverity-events","value":"2a0aa68fa8332429e5f90b2cd1a19c6c04868f876c43aa6632005d5a4a4fb4cf"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTVotesEndpoint.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java"},{"key":"local-effect","value":""},{"key":"line-number","value":182}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAALw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-639c-aa88-9dcff5bc5338?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-639c-aa88-9dcff5bc5338/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-639c-aa88-9dcff5bc5338/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c0d-4a7f-6541-9db9-b1f6e5643819","familyId":"8973F6ABB1F87DB2EBA7D71B4F49AEBD","familyKey":"3476a406-2f7c-439d-a483-bf83083f05f2::BDSA-2024-8942::CWE-20","uploadSet":"db1d35bf-b16e-4a8a-ac15-5b94618aff5c","type":{"id":"c7217284-1fa2-500c-3cae-54bd5aba1301","name":"Component vulnerability","_localized":{"name":"Weak Input Validation","otherDetail":[{"key":"description","value":"The application stores or processes untrusted data that has not been sufficiently validated. This may be due to a complete lack of validation or validation filters whose implementation does not provide sufficient protection for the given input. An application may obtain data from various external and internal sources including databases, file servers, web services, external client requests, etc. While some of these sources may be considered trustworthy, no assumptions should be made about the validity of data whose source cannot be explicitly verified. This includes not only external data, but also data that was previously stored by the same application and data generated by other entities in the same organization."},{"key":"remediation","value":"Data that does not match an expected pattern and data that could potentially be used to execute injection attacks must be discarded or sanitized before use. Before validation is performed, inputs must be normalized to a standard encoding format. Validation should then be performed in such a way that end-users cannot tamper with or bypass the control. For example, in client/server applications (e.g. web applications, mobile applications and thick clients that make service calls over a network, etc.), validation should be performed server-side rather than client-side.\n\nAllow-list validation should be favored first over other validation techniques since any character or string not explicitly specified as part of the \"known-safe\" set of characters or values is rejected or removed by default. If a sufficient allow-list pattern cannot be determined, block-list validation can be implemented to provide some protection by filtering out or rejecting inputs that contain specified characters.\n\nIn some cases, characters considered dangerous if handled by the application in certain ways may be part of an input's expected format. Separate security controls will need to be implemented in such cases to protect against certain attacks. Consider the following examples:\n\n* Application users may have a legitimate need to include characters that, in certain combinations, can be interpreted as HTML and JavaScript code by an end user's browser. In this situation, these characters cannot be filtered; instead, the application must encode these characters for the appropriate output context.\n* The application may allow users to include single-quotes in a name field, but single-quotes may affect how SQL queries are executed if the input is concatenated to a static query string. In this case, correctly utilizing parameterized queries sufficiently protects against SQL injection attacks.\n\nIn addition to syntactic checks, data should also be checked for size and semantic correctness where possible."},{"key":"subcategory","value":"Used component contains vulnerability"}]}},"attributes":[{"key":"minor-version-upgrade-guidance-high-count","value":0},{"key":"major-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-core:6.4.1"},{"key":"location","value":"Spring Security 6.3.4"},{"key":"major-version-upgrade-guidance-high-count","value":0},{"key":"minor-version-upgrade-guidance-critical-count","value":0},{"key":"component-name","value":"Spring Security"},{"key":"minor-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"cwe","value":"CWE-20"},{"key":"minor-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-core:6.4.1"},{"key":"version","value":1},{"key":"component-origin-external-namespace","value":"maven"},{"key":"minor-version-upgrade-guidance-unscored-count","value":0},{"key":"component-id","value":"d80c013b-7862-4ea8-83e5-eb7b91623e0c"},{"key":"disclosure-date","value":"2024-11-19T00:00+0000"},{"key":"linked-vulnerability-id","value":"BDSA-2024-8942"},{"key":"component-version-id","value":"ef680c3c-6b8e-46f4-ab2d-1ea68626bb7d"},{"key":"title","value":"Spring Security Vulnerable to Authorization Bypass via 'toLowerCase' and 'toUpperCase' Locale Exceptions"},{"key":"description","value":"Spring Security is vulnerable to an authorization bypass issue due to how `Locale` dependent exceptions can impact case sensitive string comparisons.\n\nThe existence of this issue could cause some authorization rules to work incorrectly and potentially allow an attacker to bypass such rules to view and alter unintended data."},{"key":"severity","value":"medium"},{"key":"component-origin-id","value":"3476a406-2f7c-439d-a483-bf83083f05f2"},{"key":"major-version-upgrade-guidance-medium-count","value":0},{"key":"minor-version-upgrade-guidance-low-count","value":0},{"key":"vulnerability-source","value":"BDSA"},{"key":"major-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"technical-description","value":"The `String.toLowerCase()` and `String.toUpperCase()` methods are used through in various authentication and authorization components of Spring Security to perform case-sensitive comparisons. A problem can arise in how these comparisons can produce different outputs depending on the `Locale`. This oversight can potentially impact authorization rules and allow attackers to bypass measures that are in place.\n\nTo remedy this issue, the vendor has updated usage of these methods to use a combination of `Locale.ROOT` and `Locale.ENGLISH` to enforce consistency."},{"key":"major-version-upgrade-guidance-low-count","value":0},{"key":"overall-score","value":"4.8"},{"key":"minor-version-upgrade-guidance-medium-count","value":0},{"key":"major-version-upgrade-guidance-critical-count","value":0},{"key":"vulnerability-id","value":"CVE-2024-38827"},{"key":"component-version-name","value":"6.3.4"},{"key":"vendor-fix-date","value":"2024-11-15T00:00+0000"},{"key":"solution","value":"Fixed in:\n* [**5.7.14**](https://github.com/spring-projects/spring-security/releases/tag/5.7.14) by [this](https://github.com/spring-projects/spring-security/commit/0eaffb37e7) commit,\n* [**5.8.16**](https://github.com/spring-projects/spring-security/releases/tag/5.8.16) by [this](https://github.com/spring-projects/spring-security/commit/a7bf8f7cc6) commit,\n* [**6.2.8**](https://github.com/spring-projects/spring-security/releases/tag/6.2.8) and [**6.3.5**](https://github.com/spring-projects/spring-security/releases/tag/6.3.5) by [this](https://github.com/spring-projects/spring-security/commit/a8c4d6cead) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases)."},{"key":"published-date","value":"2024-11-20T15:41+0000"},{"key":"component-origin-external-id","value":"org.springframework.security:spring-security-core:6.3.4"},{"key":"major-version-upgrade-guidance-unscored-count","value":0},{"key":"last-modified-date","value":"2024-11-20T15:41+0000"}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAMA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c0d-4a7f-6541-9db9-b1f6e5643819?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"}]},{"id":"1efb5c0d-4a7f-6542-9db9-531875866e6b","familyId":"F9B720A5694436E0651A044732EC8E5D","familyKey":"3476a406-2f7c-439d-a483-bf83083f05f2::BDSA-2024-8942::CWE-863","uploadSet":"db1d35bf-b16e-4a8a-ac15-5b94618aff5c","type":{"id":"6cc8f5a7-16e8-047a-34ca-31b2f0feb12a","name":"Component vulnerability","_localized":{"name":"Incorrect Authorization","otherDetail":[{"key":"description","value":"The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.\n\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.\n\n  2. Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n  3. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\n  4. For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\n\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\n\n  5. Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."},{"key":"subcategory","value":"Used component contains vulnerability"}]}},"attributes":[{"key":"minor-version-upgrade-guidance-high-count","value":0},{"key":"major-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-core:6.4.1"},{"key":"location","value":"Spring Security 6.3.4"},{"key":"major-version-upgrade-guidance-high-count","value":0},{"key":"minor-version-upgrade-guidance-critical-count","value":0},{"key":"component-name","value":"Spring Security"},{"key":"minor-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"cwe","value":"CWE-863"},{"key":"minor-version-upgrade-guidance-external-id","value":"org.springframework.security:spring-security-core:6.4.1"},{"key":"version","value":1},{"key":"component-origin-external-namespace","value":"maven"},{"key":"minor-version-upgrade-guidance-unscored-count","value":0},{"key":"component-id","value":"d80c013b-7862-4ea8-83e5-eb7b91623e0c"},{"key":"disclosure-date","value":"2024-11-19T00:00+0000"},{"key":"linked-vulnerability-id","value":"BDSA-2024-8942"},{"key":"component-version-id","value":"ef680c3c-6b8e-46f4-ab2d-1ea68626bb7d"},{"key":"title","value":"Spring Security Vulnerable to Authorization Bypass via 'toLowerCase' and 'toUpperCase' Locale Exceptions"},{"key":"description","value":"Spring Security is vulnerable to an authorization bypass issue due to how `Locale` dependent exceptions can impact case sensitive string comparisons.\n\nThe existence of this issue could cause some authorization rules to work incorrectly and potentially allow an attacker to bypass such rules to view and alter unintended data."},{"key":"severity","value":"medium"},{"key":"component-origin-id","value":"3476a406-2f7c-439d-a483-bf83083f05f2"},{"key":"major-version-upgrade-guidance-medium-count","value":0},{"key":"minor-version-upgrade-guidance-low-count","value":0},{"key":"vulnerability-source","value":"BDSA"},{"key":"major-version-upgrade-guidance-version-name","value":"6.4.1"},{"key":"technical-description","value":"The `String.toLowerCase()` and `String.toUpperCase()` methods are used through in various authentication and authorization components of Spring Security to perform case-sensitive comparisons. A problem can arise in how these comparisons can produce different outputs depending on the `Locale`. This oversight can potentially impact authorization rules and allow attackers to bypass measures that are in place.\n\nTo remedy this issue, the vendor has updated usage of these methods to use a combination of `Locale.ROOT` and `Locale.ENGLISH` to enforce consistency."},{"key":"major-version-upgrade-guidance-low-count","value":0},{"key":"overall-score","value":"4.8"},{"key":"minor-version-upgrade-guidance-medium-count","value":0},{"key":"major-version-upgrade-guidance-critical-count","value":0},{"key":"vulnerability-id","value":"CVE-2024-38827"},{"key":"component-version-name","value":"6.3.4"},{"key":"vendor-fix-date","value":"2024-11-15T00:00+0000"},{"key":"solution","value":"Fixed in:\n* [**5.7.14**](https://github.com/spring-projects/spring-security/releases/tag/5.7.14) by [this](https://github.com/spring-projects/spring-security/commit/0eaffb37e7) commit,\n* [**5.8.16**](https://github.com/spring-projects/spring-security/releases/tag/5.8.16) by [this](https://github.com/spring-projects/spring-security/commit/a7bf8f7cc6) commit,\n* [**6.2.8**](https://github.com/spring-projects/spring-security/releases/tag/6.2.8) and [**6.3.5**](https://github.com/spring-projects/spring-security/releases/tag/6.3.5) by [this](https://github.com/spring-projects/spring-security/commit/a8c4d6cead) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases)."},{"key":"published-date","value":"2024-11-20T15:41+0000"},{"key":"component-origin-external-id","value":"org.springframework.security:spring-security-core:6.3.4"},{"key":"major-version-upgrade-guidance-unscored-count","value":0},{"key":"last-modified-date","value":"2024-11-20T15:41+0000"}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAMQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c0d-4a7f-6542-9db9-531875866e6b?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"}]},{"id":"1efb910f-2ba3-674f-aa88-eff4a5e8a9f0","familyId":"C841FBADB1CCCD479D1E1EAE9680A33A","familyKey":"350119dac334a79563fa4d6612f38fc0","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"523d75e9-dc43-53b4-154d-c74678f3b4eb","name":"path_manipulation|java","_localized":{"name":"Directory Traversal","otherDetail":[{"key":"description","value":"A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."},{"key":"remediation","value":"To protect against directory traversal the application should enforce strict access controls and validate user input used to create pathnames or create indirect object references for file access. The application should also configure access to the file system on a least privilege basis to reduce the potential impact of attacks.\n\nWhenever possible, the application must restrict the use of user-supplied file paths.  When such paths are required for the application to function properly, indirect object references should be used for file access instead of accepting paths from the user. For example, consider an application that allows its users to specify a file to download from a directory. Instead of using a user-supplied filename to access the file, the application should maintain a mapping from integer keys to file names, ensuring that the supplied value is both an integer and corresponds to an actual file. In the case that a value does not have a corresponding file, the application should return a generic error message. This will often provide a safer way of referencing files that exist in the application than trying to check user input for malicious path manipulation."}]}},"attributes":[{"key":"cwe","value":"CWE-22"},{"key":"coverity-events","value":"a673de690bf70599093e4adae43de97853576080a267d2ed1274c98b9524f296"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"ProfileUploadRemoveUserInput.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadRemoveUserInput.java"},{"key":"local-effect","value":"An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application."},{"key":"line-number","value":37}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAMg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-674f-aa88-eff4a5e8a9f0?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-674f-aa88-eff4a5e8a9f0/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-674f-aa88-eff4a5e8a9f0/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cb-60c7-8dbc-377804b1674d","familyId":"E08425F121E195DFC2EB87D537D1920C","familyKey":"361b99271065554238d875bb202b6f3b","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"11f015d5-e3b0-e0c2-0e50-607c76748db3","name":"sigma.excessive_session_lifetime:spring_boot_properties|text","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The session is configured with an excessively long timeout value. Session-based attacks require an active session. Therefore, the longer a session persists, the more time an attacker has to hijack the session."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"21fb7bef4193217fe61d59ebbf347878a984a989359a4261a33f84a3e5e2bfdf"},{"key":"severity","value":"low"},{"key":"language","value":"Text"},{"key":"filename","value":"application-webwolf.properties"},{"key":"location","value":"src/main/resources/application-webwolf.properties"},{"key":"local-effect","value":""},{"key":"line-number","value":14}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAMw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c7-8dbc-377804b1674d?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c7-8dbc-377804b1674d/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cb-60c7-8dbc-377804b1674d/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c35-f907-6eed-9db9-b706d883bcf3","familyId":"88889EEB8263F14E22E9B33D226F786C","familyKey":"3677b377252a809599df6ebac52297a5","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"b8e09077-b266-874d-2f59-a193eb67a23d","name":"sigma.hardcoded_secret:pattern_low|javascript","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"ae4203bf977e2bc53db80693f58b83fb9124fb6e40c0663a8c1e0dfc57347295"},{"key":"severity","value":"low"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"jwt-refresh.js"},{"key":"location","value":"src/main/resources/lessons/jwt/js/jwt-refresh.js"},{"key":"local-effect","value":""},{"key":"line-number","value":10}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAANA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6eed-9db9-b706d883bcf3?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6eed-9db9-b706d883bcf3/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efa0a52-89c8-6941-8dbc-3faf54def4a8","familyId":"04ADCF0A785A4FDF6BEA93929A522D87","familyKey":"38077235d03f37680717773c71fe5eb3","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"3778d0cf-475b-0773-a9e4-d4c299f460b4","name":"missing_break:logic_error|javascript","_localized":{"name":"Omitted Break Statement in Switch","otherDetail":[{"key":"description","value":"Missing break statement between cases in switch statement"},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.\n  2. The functionality of omitting a break statement could be clarified with an if statement. This method is much safer."}]}},"attributes":[{"key":"cwe","value":"CWE-484"},{"key":"coverity-events","value":"29bf5839ea03547825575262547e5663c72f340a0abacfa249c79e505beff8a0"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Execution falls through to the next case statement or default; this might indicate a common typo."},{"key":"line-number","value":13122}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAANQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6941-8dbc-3faf54def4a8?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6941-8dbc-3faf54def4a8/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6941-8dbc-3faf54def4a8/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d6-aa88-b9bcd6225ae0","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"8f53f3cb06ecc953c40119f44b2826706ff79e0fac40d0db6c6eba1e2c217e81"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAANg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d6-aa88-b9bcd6225ae0?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d6-aa88-b9bcd6225ae0/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d6-aa88-b9bcd6225ae0/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63cc-aa88-af8ddf2b504b","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"f238a8f8dfa3b8bd87acdcee69b344e9877cfede34598d5f47e13419bb8f5c2e"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAANw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cc-aa88-af8ddf2b504b?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cc-aa88-af8ddf2b504b/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cc-aa88-af8ddf2b504b/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63cd-aa88-7789a0df04e8","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"335cd3d340f4a25e17b33c11a711b8937c80ab738114b64e77cf5dd56ddcb094"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAOA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cd-aa88-7789a0df04e8?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cd-aa88-7789a0df04e8/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cd-aa88-7789a0df04e8/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63ce-aa88-31c0ea3a2f40","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"84bc5d125487ff45b64bd61ae57614cc573c35f361ff446c719dc76f81075eea"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAOQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63ce-aa88-31c0ea3a2f40?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63ce-aa88-31c0ea3a2f40/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63ce-aa88-31c0ea3a2f40/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63cf-aa88-5f78a7072429","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"de02afdb2d71fcbf7b78f84d03d906271208d4b07952b68bb0215913dc08106d"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAOg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cf-aa88-5f78a7072429?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cf-aa88-5f78a7072429/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63cf-aa88-5f78a7072429/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d0-aa88-17248094dfd6","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"36a81d7c66f5c2540657b007e8dd710f83e6663fcf83f3139f36f5def1228a59"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAOw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d0-aa88-17248094dfd6?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d0-aa88-17248094dfd6/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d0-aa88-17248094dfd6/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d1-aa88-b32ea6a9db44","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"fa0933df7c5fe81558a449214100c087de195741b4e87118b5edc273aef15c2c"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAPA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d1-aa88-b32ea6a9db44?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d1-aa88-b32ea6a9db44/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d1-aa88-b32ea6a9db44/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d2-aa88-35beb3caa822","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"44b646e21bcb086d62eba6acc01a44e39f95ccd938ca37666195acf2a9520d88"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAPQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d2-aa88-35beb3caa822?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d2-aa88-35beb3caa822/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d2-aa88-35beb3caa822/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d3-aa88-41602b9dfb08","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"b52c05f2e7fada1f1670fc2f86862a866654b08579805b86efcc9bd4c0ae98d4"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAPg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d3-aa88-41602b9dfb08?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d3-aa88-41602b9dfb08/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d3-aa88-41602b9dfb08/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d4-aa88-61eb194d8997","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"9d9605dd3afc0a5be08e2c06e1cd63301303dbe865ffb9da4be1cf3e54a49dfa"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAPw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d4-aa88-61eb194d8997?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d4-aa88-61eb194d8997/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d4-aa88-61eb194d8997/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d5-aa88-13afc9ae25dc","familyId":"5F228F2BDDF1F04A4B017EC564420F97","familyKey":"3951f6d8d2928e966fe67f47f45b8c5d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"29de7cf115a7cce4cafaccd13712892c3dec00f5147a6b3850b7489351d386eb"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAQA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d5-aa88-13afc9ae25dc?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d5-aa88-13afc9ae25dc/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d5-aa88-13afc9ae25dc/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63bb-aa88-43e8674655c4","familyId":"93CFF678BA4BF2DF2793B1039ABFACFF","familyKey":"39ed92cd39589df9e0528ebfc49de1a3","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"f21aa60872b695237abfc5f519261c966ef8b8a669e659e0b735c069d3f96351"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson6a.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":63}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAQQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63bb-aa88-43e8674655c4?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63bb-aa88-43e8674655c4/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63bb-aa88-43e8674655c4/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb910f-2ba3-6750-aa88-19c36178b32f","familyId":"C1339D87DF367D891036B0070D5FF8B3","familyKey":"3a88ed00f4605ae12d0ea22b2690403a","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"523d75e9-dc43-53b4-154d-c74678f3b4eb","name":"path_manipulation|java","_localized":{"name":"Directory Traversal","otherDetail":[{"key":"description","value":"A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."},{"key":"remediation","value":"To protect against directory traversal the application should enforce strict access controls and validate user input used to create pathnames or create indirect object references for file access. The application should also configure access to the file system on a least privilege basis to reduce the potential impact of attacks.\n\nWhenever possible, the application must restrict the use of user-supplied file paths.  When such paths are required for the application to function properly, indirect object references should be used for file access instead of accepting paths from the user. For example, consider an application that allows its users to specify a file to download from a directory. Instead of using a user-supplied filename to access the file, the application should maintain a mapping from integer keys to file names, ensuring that the supplied value is both an integer and corresponds to an actual file. In the case that a value does not have a corresponding file, the application should return a generic error message. This will often provide a safer way of referencing files that exist in the application than trying to check user input for malicious path manipulation."}]}},"attributes":[{"key":"cwe","value":"CWE-22"},{"key":"coverity-events","value":"6d7885ab7828627dfd2809546c12c4c806424b81ae6f0c73a6dd318e57783a52"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"ProfileUploadFix.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadFix.java"},{"key":"local-effect","value":"An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application."},{"key":"line-number","value":39}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAQg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6750-aa88-19c36178b32f?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6750-aa88-19c36178b32f/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-6750-aa88-19c36178b32f/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c31-aa88-15d3a7fb576f","familyId":"C9A9D6725914BEAA6B55950E0B1E07E4","familyKey":"3c3be5474bab25f3702123770f7059e6","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"0028b018-fea9-c1e7-173c-042364f398ac","name":"risky_crypto:hashing|java","_localized":{"name":"Weak Hash Function","otherDetail":[{"key":"description","value":"A risky hashing function was used. This may allow an attacker to produce collisions on the hash or execute length extension attacks."},{"key":"remediation","value":"Ensure the use of cryptographically strong hashing algorithms such as the ones approved by NIST:\n\n* https://csrc.nist.gov/projects/hash-functions"}]}},"attributes":[{"key":"cwe","value":"CWE-328"},{"key":"coverity-events","value":"618d1574aff7abe327ce749ac05e2b4b148ac3fbb66547fd2739d9e0b251e41d"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"HashingAssignment.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java"},{"key":"local-effect","value":"A use of a weak hashing algorithm was detected. There exist well known ways to produce collisions on the hashes."},{"key":"line-number","value":57}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAQw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c31-aa88-15d3a7fb576f?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c31-aa88-15d3a7fb576f/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c31-aa88-15d3a7fb576f/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-6944-8dbc-55991da4713b","familyId":"761765D9BC41FD999927EBCA71834416","familyKey":"3ccfb6c68a7a6f182616962bbb2557b4","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"913f6040-3e2f-b2dd-2b60-f222024bddf1","name":"no_effect|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"An expression is useless because it has no side effects and its result is ignored."},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-398"},{"key":"coverity-events","value":"014ca6406f2e406ba6f809c15c5f8c47a0dc63b60c65ecd7e266e8642b0e948f"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Perhaps the code was intended to affect the behavior of the program, but it does not."},{"key":"line-number","value":9117}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAARA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6944-8dbc-55991da4713b?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6944-8dbc-55991da4713b/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6944-8dbc-55991da4713b/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e28-8dbc-2b58bf9d806b","familyId":"BD484CED30104534C4EA488F0AB35F7F","familyKey":"3d74c783086ad02299274f93ddfe27a2","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"e58bd0060e62ceea32b94588a6b628cd209caa9555a0060d207ca2588931f0cb"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTVotesEndpointTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpointTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":245}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAARQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e28-8dbc-2b58bf9d806b?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e28-8dbc-2b58bf9d806b/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e28-8dbc-2b58bf9d806b/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0b5e-3e47-67a9-8dbc-6775c662364f","familyId":"6C2956291FDDE102D8D814EAA928EE51","familyKey":"3daee983bb8d7531b675b1823916716b","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"bb3fc5861ddc5d60e50f97ace53e0c3bc500eb6bc04121480062d6e2598b05c0"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"Servers.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/Servers.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":71}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAARg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e47-67a9-8dbc-6775c662364f?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e47-67a9-8dbc-6775c662364f/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e47-67a9-8dbc-6775c662364f/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63b4-aa88-c575683e8823","familyId":"C3065218A9C8CECFC97DE45069724D1D","familyKey":"3e9c9ad246506c0cf9df77cd0690e409","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"7294a983-8fc2-269e-81c0-cf763d5dfd26","name":"sql_injection:sink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"624151c894f68bb642fccb62f1c0e8d556a41d75e2514265f688b7aeec2cb855"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlOnlyInputValidationOnKeywords.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidationOnKeywords.java"},{"key":"local-effect","value":"A user can change the intent of the SQL query, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAARw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b4-aa88-c575683e8823?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b4-aa88-c575683e8823/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63b4-aa88-c575683e8823/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-692f-8dbc-571f7880c797","familyId":"407FB9408A883BB1FC3EE61424CCC82B","familyKey":"3f50a09c6bb631c76421e2a2b72208d5","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"083dbbe1-661c-269d-fac3-ea191b21f678","name":"xss:dom_xss|javascript","_localized":{"name":"DOM-Based Cross-Site Scripting","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into a context that can execute JavaScript."},{"key":"remediation","value":"Use the correct remediation approach depending on the data context. Like traditional XSS mitigations, DOM-based XSS is mitigated using output encoding and input validation. The output encoding technique should match the context where data is inserted, such as HTML, HTML attribute, URL parameter, etc. Keep in mind that some contexts, such as the \"href\" attribute value, cannot be mitigated with output encoding alone and, therefore, require input validation. As the injection of untrusted data happens in the browser, the mitigation must be done in the client-side code.\n\nDifferent mitigation techniques apply to different JavaScript execution contexts:\n\n* HTML context. Use the correct element property, such as \"textContent\", \"innerText\" or \"outerText\", so that the inserted data is automatically output-encoded by the browser. \n* HTML attributes. When the \"setAttribute()\" function is used with untrusted data in both the name of the attribute and its value, use exact match to limit the attribute names that a user can set. These should only be safe attributes that do not execute JavaScript, such as \"align\", \"alink\", \"alt\", \"value\" and not event handlers or URI-type attributes. When untrusted data is used to set the value of the attribute, make sure that the attribute is not an event handler or a source. In addition, use input validation for the attribute's values, where appropriate (for example, for numeric values, such as \"width\", \"height\").\n* URL context. Use the exact match approach or mapping. If the application must allow users to provide any URL, at the minimum, validate the schema of the URL to avoid XSS through redirects to \"javascript:\" and \"data:\" URLs. \n* JavaScript context. Redesign the application so untrusted data is not used to dynamically create or modify JavaScript code. If a redesign is not possible, use exact match or allow-lists to validate data instead, since JavaScript encoding will not mitigate an injection into a string that is dynamically evaluated by functions like \"eval()\", \"new Function()\", \"document.write()\", or an event handler. \n\nRemember that server-side validation will not protect the application from DOM-based XSS because in DOM-based injections the payload is evaluated on the client side and not on the server side.\n\nFor example, if untrusted data passed through the URL fragment must be added to the page, use the \"innerText\" property rather than \"innerHTML\". In this case, if the data contains any HTML tags, they will be automatically encoded by the browser.\n\n```\n<p><b id='err'></b></p>\n<input type=hidden id=_csrf value=\"wS2sCg7DA0\" />\n<script>document.getElementById('err').innerText = window.location.hash.substring(1);</script>\n```"}]}},"attributes":[{"key":"cwe","value":"CWE-79"},{"key":"coverity-events","value":"6cb2c337eb0f48f147d9bc9f4c6c989f082a6d88ec803ad5c5f617ab3feffcdc"},{"key":"severity","value":"high"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"jwt-jku.js"},{"key":"location","value":"src/main/resources/lessons/jwt/js/jwt-jku.js"},{"key":"local-effect","value":"A user can execute arbitrary JavaScript on a web page viewed or accessed by another user, potentially allowing session hijacking, disclosing sensitive data in the DOM, or viewing of keyboard and mouse events."},{"key":"line-number","value":1}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAASA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692f-8dbc-571f7880c797?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692f-8dbc-571f7880c797/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692f-8dbc-571f7880c797/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-692b-8dbc-4dba434a4b87","familyId":"F3AFB42DC833BA9958BC8ABD8880A9ED","familyKey":"3f9b8ee6fb1c772f5346d4d2c41ee76c","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"a5b35c1c-c317-da3b-7fc6-bba16277f9a5","name":"deadcode:logical_contradiction|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"Code can never be reached because of a logical contradiction"},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-561"},{"key":"coverity-events","value":"8f5d210bb4fd7ad1c36ca3ec897267c9b53f61ea5e0d516b6fdaa331f4081ded"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"wysihtml5-0.3.0.js"},{"key":"location","value":"src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js"},{"key":"local-effect","value":"The indicated dead code may have performed some action; that action will never occur."},{"key":"line-number","value":344}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAASQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692b-8dbc-4dba434a4b87?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692b-8dbc-4dba434a4b87/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692b-8dbc-4dba434a4b87/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89c8-692c-8dbc-6dc9cb473f25","familyId":"F3AFB42DC833BA9958BC8ABD8880A9ED","familyKey":"3f9b8ee6fb1c772f5346d4d2c41ee76c","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"a5b35c1c-c317-da3b-7fc6-bba16277f9a5","name":"deadcode:logical_contradiction|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"Code can never be reached because of a logical contradiction"},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-561"},{"key":"coverity-events","value":"5609cf8710f937ab43c855ab443cb3f6bb309d1224e02f94cab5480a9536b17e"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"wysihtml5-0.3.0.js"},{"key":"location","value":"src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js"},{"key":"local-effect","value":"The indicated dead code may have performed some action; that action will never occur."},{"key":"line-number","value":355}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAASg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692c-8dbc-6dc9cb473f25?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692c-8dbc-6dc9cb473f25/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-692c-8dbc-6dc9cb473f25/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c1b-aa88-778d1efc15a2","familyId":"D4EC0F339A46C06CEC11784431E277AB","familyKey":"413a0d746a237c5cca4a4317abccd0b1","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"6718c98d721937aa2c8671995c09b804dceb925d80b99601c8c9bc67d2c82383"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson10.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":120}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAASw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c1b-aa88-778d1efc15a2?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c1b-aa88-778d1efc15a2/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c1b-aa88-778d1efc15a2/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63d7-aa88-291fb8011365","familyId":"D8A8D70B85D2AC421C812B4E8C161DCD","familyKey":"4496b110d904f1f3478a3423aa488905","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dafc7125-cf14-df2b-563f-17bc3a1690ac","name":"sql_injection:nosink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"6bcd052ba2aa8f49f47dab161aaddc266dc7929c866fadcf8d770212b3e0f406"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson5b.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"},{"key":"local-effect","value":"If the string is a SQL query, a user can change its intent, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":59}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAATA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d7-aa88-291fb8011365?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d7-aa88-291fb8011365/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63d7-aa88-291fb8011365/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c35-f907-6ef3-9db9-175c7b770be6","familyId":"2E9C85C74AF0CA660518223B452C9DF5","familyKey":"4601b1a02df9ee1da12e10c8b04e7e36","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"42ef5c19269eef3a0864ed5b46b9d954e837c43f8fce756ecfe291bf741efabd"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"MissingFunctionAC.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/missingac/MissingFunctionAC.java"},{"key":"local-effect","value":""},{"key":"line-number","value":32}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAATQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6ef3-9db9-175c7b770be6?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6ef3-9db9-175c7b770be6/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efa0a52-89cf-6e5f-8dbc-0be8c98d4abd","familyId":"60667058BE8E198A5F951B1D169242B0","familyKey":"469910a7a0269328d8fd087f7efd9ba8","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"0b04b9a9-2b9c-4162-7035-f0f6aa5f3de7","name":"trust_boundary_violation|java","_localized":{"name":"Trust Boundary Violation","otherDetail":[{"key":"description","value":"A user-controllable string is stored in a trusted data structure."},{"key":"remediation","value":"The application must always validate data crossing a trust boundary before use in application logic or storage in trusted data structures. Validation techniques based on lists of allowed characters or values should be favored first over other validation techniques since any character or string not explicitly specified as part of the known safe set of characters or values is rejected or removed by default. If a sufficient pattern of allowed input cannot be determined, validation based on forbidden input can be implemented to provide some protection by filtering out or rejecting inputs that contain specified characters.\n\nIn some cases, characters considered dangerous if handled by the application in specific ways may be part of an input's expected format. Separate security controls will need to be implemented in such cases to protect against specific attacks. Consider the following examples:\n\n* Application users may have a legitimate need to include characters that, in certain combinations, can be interpreted as HTML and JavaScript code by an end-user's browser. In this situation, these characters cannot be filtered; instead, the application must encode these characters for the appropriate output context.\n* The application may allow users to include single quotes in a name field, but single quotes may affect how SQL queries are executed if the input is concatenated to a static query string. In this case, correctly utilizing parameterized queries sufficiently protects against SQL injection attacks.\n\nIn addition to syntactic checks, data should also be checked for size and semantic correctness where possible."}]}},"attributes":[{"key":"cwe","value":"CWE-501"},{"key":"coverity-events","value":"c9eeb4549c59052cef28ef70573b8969157b0c10c34a7705fa01cbd84b366558"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"MailboxController.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/webwolf/mailbox/MailboxController.java"},{"key":"local-effect","value":"The tainted data can be mixed with trustworthy data and can be mistakenly used in an insecure manner."},{"key":"line-number","value":54}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAATg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e5f-8dbc-0be8c98d4abd?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e5f-8dbc-0be8c98d4abd/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e5f-8dbc-0be8c98d4abd/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe2-65b2-aa88-9355ce435b97","familyId":"5300563E7F24AD8EDABA9735CFA49511","familyKey":"48a4eb7410163451ce7fe3cb0ffd1458","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"38b33268-52c8-c4b3-2204-cbd25cabf276","name":"hardcoded_credentials:cryptographic_key|java","_localized":{"name":"Use of Hard-coded Cryptographic Key","otherDetail":[{"key":"description","value":"A cryptographic key is stored directly in the source code."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Prevention schemes mirror that of hard-coded password storage."}]}},"attributes":[{"key":"cwe","value":"CWE-321"},{"key":"coverity-events","value":"309c7a0b16f8cf0b7621288ae31a276eb0742402473d90051c9bc15b625c44fe"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTVotesEndpoint.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java"},{"key":"local-effect","value":"Users with access to this source code can use this key to access encrypted production data.  Changing this key requires changing the code and re-deploying the application."},{"key":"line-number","value":146}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAATw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65b2-aa88-9355ce435b97?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65b2-aa88-9355ce435b97/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65b2-aa88-9355ce435b97/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63c8-aa88-afae7f9146f6","familyId":"140F3B733FD0D378EA0DA97A8BA3A57B","familyKey":"48a8531d16bd1b9ba4d887eb9a9a7a67","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"7294a983-8fc2-269e-81c0-cf763d5dfd26","name":"sql_injection:sink|java","_localized":{"name":"SQL Injection","otherDetail":[{"key":"description","value":"Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering."},{"key":"remediation","value":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries.\n\nMost modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n\nNote: the exact syntax and use of prepared statements with parameterized queries vary from language to language."}]}},"attributes":[{"key":"cwe","value":"CWE-89"},{"key":"coverity-events","value":"c87b4b7b8808ec5124768d8f697647915755faf1546bd4f9fe8811c2314b070c"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson3.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java"},{"key":"local-effect","value":"A user can change the intent of the SQL query, which may inappropriately disclose or corrupt data within the database."},{"key":"line-number","value":56}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAUA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63c8-aa88-afae7f9146f6?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63c8-aa88-afae7f9146f6/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63c8-aa88-afae7f9146f6/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c25-aa88-3f71fcbbcacd","familyId":"75A1F662E414DB8F1118B53DEA62831D","familyKey":"523becc4b0535c4c17a2238cd81139eb","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"ea4779f7dcc176e158ee0b1b5b55b55f4adfebf510b4a8205850ff3d1d77397f"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson10.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":90}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAUQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c25-aa88-3f71fcbbcacd?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c25-aa88-3f71fcbbcacd/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c25-aa88-3f71fcbbcacd/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c24-aa88-dd8360f5712b","familyId":"75A1F662E414DB8F1118B53DEA62831D","familyKey":"523becc4b0535c4c17a2238cd81139eb","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"7176727522e935319efda6e672a1f2bc1877d3ca4396a2f9f3f20da1e5a42b70"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson10.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":79}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAUg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c24-aa88-dd8360f5712b?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c24-aa88-dd8360f5712b/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c24-aa88-dd8360f5712b/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb5c35-f907-6f0d-9db9-739623ea6f1e","familyId":"77F0E90D5AE37FCFE02EA0E24C1EB759","familyKey":"53b3cb5156ba53f69c17725a474b8c7f","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"ccd2e9b4-23f2-6e51-bc3c-89b43e75582c","name":"sigma.hardcoded_secret:pattern_medium|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"fcc5dd0dedf5cd25ff0b7b29d6bcf87d150c7c7ef62e83c21a016caa6486c05e"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTTokenTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/webwolf/jwt/JWTTokenTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":30}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAUw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0d-9db9-739623ea6f1e?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0d-9db9-739623ea6f1e/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efb5c35-f907-6f0f-9db9-97699b92d7df","familyId":"F5251DBD63D7BB8163360A29B2B9577B","familyKey":"5467d21966f7af5c41b986ad9a5a351e","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"ccd2e9b4-23f2-6e51-bc3c-89b43e75582c","name":"sigma.hardcoded_secret:pattern_medium|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"80fd332625285726284ad794314924b68eab46cda2174eed4a75ca75cfe237a2"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTTokenTest.java"},{"key":"location","value":"src/test/java/org/owasp/webgoat/webwolf/jwt/JWTTokenTest.java"},{"key":"local-effect","value":""},{"key":"line-number","value":44}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAVA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0f-9db9-97699b92d7df?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb5c35-f907-6f0f-9db9-97699b92d7df/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efb910f-2ba3-674e-aa88-d33c4a1ca8ec","familyId":"3D785508FBD114C504C9391049335A34","familyKey":"56773c5ba786fbde903862d2daceb737","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"523d75e9-dc43-53b4-154d-c74678f3b4eb","name":"path_manipulation|java","_localized":{"name":"Directory Traversal","otherDetail":[{"key":"description","value":"A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."},{"key":"remediation","value":"To protect against directory traversal the application should enforce strict access controls and validate user input used to create pathnames or create indirect object references for file access. The application should also configure access to the file system on a least privilege basis to reduce the potential impact of attacks.\n\nWhenever possible, the application must restrict the use of user-supplied file paths.  When such paths are required for the application to function properly, indirect object references should be used for file access instead of accepting paths from the user. For example, consider an application that allows its users to specify a file to download from a directory. Instead of using a user-supplied filename to access the file, the application should maintain a mapping from integer keys to file names, ensuring that the supplied value is both an integer and corresponds to an actual file. In the case that a value does not have a corresponding file, the application should return a generic error message. This will often provide a safer way of referencing files that exist in the application than trying to check user input for malicious path manipulation."}]}},"attributes":[{"key":"cwe","value":"CWE-22"},{"key":"coverity-events","value":"8176f4020e0ea716eecddd7ebe6e2111b7ea18a869f8f0277712fc6e8d49f3e2"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"ProfileZipSlip.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java"},{"key":"local-effect","value":"An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application."},{"key":"line-number","value":57}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAVQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-674e-aa88-d33c4a1ca8ec?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-674e-aa88-d33c4a1ca8ec/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb910f-2ba3-674e-aa88-d33c4a1ca8ec/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe2-65e8-aa88-955fbbe1bb5e","familyId":"3D785508FBD114C504C9391049335A34","familyKey":"56773c5ba786fbde903862d2daceb737","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"523d75e9-dc43-53b4-154d-c74678f3b4eb","name":"path_manipulation|java","_localized":{"name":"Directory Traversal","otherDetail":[{"key":"description","value":"A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."},{"key":"remediation","value":"To protect against directory traversal the application should enforce strict access controls and validate user input used to create pathnames or create indirect object references for file access. The application should also configure access to the file system on a least privilege basis to reduce the potential impact of attacks.\n\nWhenever possible, the application must restrict the use of user-supplied file paths.  When such paths are required for the application to function properly, indirect object references should be used for file access instead of accepting paths from the user. For example, consider an application that allows its users to specify a file to download from a directory. Instead of using a user-supplied filename to access the file, the application should maintain a mapping from integer keys to file names, ensuring that the supplied value is both an integer and corresponds to an actual file. In the case that a value does not have a corresponding file, the application should return a generic error message. This will often provide a safer way of referencing files that exist in the application than trying to check user input for malicious path manipulation."}]}},"attributes":[{"key":"cwe","value":"CWE-22"},{"key":"coverity-events","value":"57099e1df763aab16a7e834b913fdbccd94036411d426fb790917a7ad3e3ddd5"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"ProfileZipSlip.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java"},{"key":"local-effect","value":"An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application."},{"key":"line-number","value":57}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAVg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65e8-aa88-955fbbe1bb5e?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65e8-aa88-955fbbe1bb5e/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65e8-aa88-955fbbe1bb5e/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e61-8dbc-59cadfde7020","familyId":"51CC6A71BC0FBA78A2F1D61E1199B663","familyKey":"56d49c843f8924a012fc0373104e023e","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"2749c7ed-725e-f03a-9734-7515e79b1f67","name":"unlocked_access:unlocked_write|java","_localized":{"name":"Missing Synchronization","otherDetail":[{"key":"description","value":"Attempt to write a shared variable without holding a lock."},{"key":"remediation","value":"Unspecified remediation."}]}},"attributes":[{"key":"cwe","value":"CWE-820"},{"key":"coverity-events","value":"fb614abb74cd2cf29f2bd630846fb0ab210dd48c7181b1418d4733adc5643c9f"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SessionService.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/container/service/SessionService.java"},{"key":"local-effect","value":"May result in data corruption."},{"key":"line-number","value":32}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAVw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e61-8dbc-59cadfde7020?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e61-8dbc-59cadfde7020/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e61-8dbc-59cadfde7020/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe2-65ff-aa88-777201d174a0","familyId":"0B1E90069E8CB0F4E6E3C35607261F3D","familyKey":"599c2857e677ed6f98b1f6e9421ae6b8","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"76b609be53a64cfc5dd3fa348a850bbae052c8b80f7e939b6f113f0790488f5c"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson9.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":135}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAWA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65ff-aa88-777201d174a0?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65ff-aa88-777201d174a0/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe2-65ff-aa88-777201d174a0/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-63e2-aa88-57f3a974c5db","familyId":"1722D801F2482D114DF7CD12C3CAF6A2","familyKey":"5c6ee9fa6cad483f9201c4ff93764720","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"29bcabef-8e31-df64-1e94-d4002d4ea594","name":"url_manipulation:bad_web_uri|java","_localized":{"name":"Server-Side Request Forgery","otherDetail":[{"key":"description","value":"A user-controllable string is used to specify a URL that is used in a connection. An attacker can modify the URL scheme to access a local file. An attacker can also mount a phishing attack by modifying the URL value to point to a malicious website."},{"key":"remediation","value":"The use of server-side requests must be limited to specific scenarios required by the application, and servers must be hardened to only allow requests to legitimate targets. If possible, avoid use of input from client requests when constructing server-side requests. If data from client requests needs to be included when constructing the server-side request, the application must ensure that strict input validation is used, and that appropriate encoding is applied for the data context (e.g., blocking newline characters or encoding them appropriately to avoid HTTP Request header injection).\n\nThe risk of SSRF can be mitigated using a combination of input validation techniques and firewall rules:\n\n1. Limit service types and endpoints exposed via input validation on user input. For example, only allow URL schemes such as HTTP/HTTPS, if those are the expected schemes for the server-side request. Disallow all other URL schemes such as file://, dict://, gopher://, ftp://. Create an allow-list of trusted destinations (if this list is known) or a block-list preventing access to any internal resources (if access to arbitrary external servers is required). Validate that the input is in the expected format, and that the target IP resolved from a domain name is indeed allowed, e.g., if you want to block \"localhost\" and \"127.0.0.1\", you must also check that an attacker can't bypass this by using an external domain name that resolves to a forbidden internal or loopback IP such as \"127.0.0.1\". It's also important that the validation routine and the HTTP client making the server-side request parses the input in the same way, as any discrepancy between them might be abused by an attacker to bypass the validation routine.\n2. Limit service interactions on the network layer. Carefully analyze if the server requires interactions with external servers. \n\nBased on the intended use case, prevent unintended behavior in one of the following ways:\n\n* External service interactions required: If the server is to perform interactions with external services, the server must be hardened to safely eliminate requests to services available on the local loopback adapter and prevent any non-essential requests from the server to other internal systems.\n* External service interactions not required: If the server is to only interact with local services, configure outbound firewall rules to check any requests being made from the application. The rules must limit the web server's interaction with other hosts by routing traffic only to specified resources on the local network, i.e., web servers must not be allowed to make connections to any host not included in the allow-list."}]}},"attributes":[{"key":"cwe","value":"CWE-918"},{"key":"coverity-events","value":"42f3571ef70df7b53a4b4b0e79c8c0e7996b0027ac20f00b98014e1c1c800fb1"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"SSRFTask2.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/ssrf/SSRFTask2.java"},{"key":"local-effect","value":"An attacker may access unintended files or make the application access a malicious website."},{"key":"line-number","value":48}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAWQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e2-aa88-57f3a974c5db?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e2-aa88-57f3a974c5db/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-63e2-aa88-57f3a974c5db/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-6388-aa88-f7f1ccc70e43","familyId":"1B9D551367ED0633125AB5DDD13897A0","familyKey":"5dcf17ec2d69828fdd3d5cca90692431","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"dc403c50-e293-78e9-f286-2c3c47b01ede","name":"sigma.jwt_non_expiring_token:io_jsonwebtoken|java","_localized":{"name":"Insufficient Session Expiration","otherDetail":[{"key":"description","value":"The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Set sessions/credentials expiration date."}]}},"attributes":[{"key":"cwe","value":"CWE-613"},{"key":"coverity-events","value":"31559724c9aa50cf46526eae9853c8eb4894d22c6574e1a3fde3551c650dea19"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTRefreshEndpoint.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpoint.java"},{"key":"local-effect","value":""},{"key":"line-number","value":88}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAWg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6388-aa88-f7f1ccc70e43?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6388-aa88-f7f1ccc70e43/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6388-aa88-f7f1ccc70e43/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe7-6380-aa88-51d61d7002a0","familyId":"69B7AD597723773A0BD5C77263B20A52","familyKey":"5f81be56dbb8d86e0abce2d061cccfea","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"36043618db3a78809ae710ded055747b388b0e56341839262c02a0ec7fd22274"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"Assignment7.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/challenges/challenge7/Assignment7.java"},{"key":"local-effect","value":""},{"key":"line-number","value":89}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAWw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6380-aa88-51d61d7002a0?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe7-6380-aa88-51d61d7002a0/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efb84f8-4fe4-6c53-aa88-53605f1b9218","familyId":"1517C628ED7B193A043237DAADDC46F1","familyKey":"6161e607b40b72f5bc52b9993a67b5fc","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"2170ca5bb93f29dd0f24866f8cd1bf6a4fef3c4e8d4f6ab6852c0b0040c9c015"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTRefreshEndpoint.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpoint.java"},{"key":"local-effect","value":""},{"key":"line-number","value":64}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAXA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c53-aa88-53605f1b9218?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c53-aa88-53605f1b9218/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efa0a52-89c8-6947-8dbc-331e1fb864fa","familyId":"DBDB213346279FEEE157E9142CBAE688","familyKey":"627b1a734680452c222872f3e5413ead","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"913f6040-3e2f-b2dd-2b60-f222024bddf1","name":"no_effect|javascript","_localized":{"name":"Unreachable, Unused or Dead Code","otherDetail":[{"key":"description","value":"An expression is useless because it has no side effects and its result is ignored."},{"key":"remediation","value":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed."}]}},"attributes":[{"key":"cwe","value":"CWE-398"},{"key":"coverity-events","value":"9ae4e7ac80f50e9c4934bcf0b734cf4ce89012be1e2637149d51eccfb20ff986"},{"key":"severity","value":"medium"},{"key":"language","value":"JavaScript"},{"key":"filename","value":"ace.js"},{"key":"location","value":"src/main/resources/webgoat/static/js/libs/ace.js"},{"key":"local-effect","value":"Perhaps the code was intended to affect the behavior of the program, but it does not."},{"key":"line-number","value":8534}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAXQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6947-8dbc-331e1fb864fa?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6947-8dbc-331e1fb864fa/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89c8-6947-8dbc-331e1fb864fa/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c54-aa88-654256d97355","familyId":"7C65ADCB91C5FDAEED71D64C1B012890","familyKey":"634b18200cd27e7d8050e47e84268867","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"5cc31ff8e8482b35903a54f725cedc515fb78392cc586b2bd682e863a57b703f"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"JWTRefreshEndpoint.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpoint.java"},{"key":"local-effect","value":""},{"key":"line-number","value":63}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAXg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c54-aa88-654256d97355?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c54-aa88-654256d97355/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]},{"id":"1efb84f8-4fe4-6c21-aa88-4b0c6c48847a","familyId":"DC3C613C458AF85C559BA91404E45A81","familyKey":"63cf3054bf588be021b762c2791eadbf","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"98bad5551e2eef6400676389f2dd1f0cb0f2361e60b44ca1101b902353e2b876"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"ProfileUploadRetrieval.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadRetrieval.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":60}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAXw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c21-aa88-4b0c6c48847a?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c21-aa88-4b0c6c48847a/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c21-aa88-4b0c6c48847a/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0a52-89cf-6e45-8dbc-85ef7acaa68d","familyId":"31AEEEB35B3665893AD4B2407C2C7CD7","familyKey":"6507187ad7cfaec18b74876a5ee5dee9","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"934a4f7e-6920-9ae8-0d5f-939f1e65634f","name":"sigma.weak_password_hash:spring_security_code|java","_localized":{"name":"Weak Encoding for Password","otherDetail":[{"key":"description","value":"Spring Security framework uses weak hashing algorithm in the PasswordEncoder interface. Weak hashing algorithm does not adequately protect the password. In case of a data leak from a password storage, attackers will easily be able to obtain the original password values."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. Passwords should be encrypted with keys that are at least 128 bits in length for adequate security."}]}},"attributes":[{"key":"cwe","value":"CWE-261"},{"key":"coverity-events","value":"9354cc2bb93130b2240b0d65f8b4613bbe7b91206a3b7e001da9bb9e266dd7dc"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"WebSecurityConfig.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/container/WebSecurityConfig.java"},{"key":"local-effect","value":""},{"key":"line-number","value":114}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAYA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e45-8dbc-85ef7acaa68d?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e45-8dbc-85ef7acaa68d/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0a52-89cf-6e45-8dbc-85ef7acaa68d/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efa0b5e-3e45-600e-8dbc-b9fd2a4aeebe","familyId":"43EF544B5C633CBFD928D1B020E699CA","familyKey":"65e33b07d35bd970cd4ddd346a5ecaba","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"24c0e09d-1db3-260a-f6cb-f5028e0307cc","name":"null_pointer_dereference_exception:return_value|java","_localized":{"name":"NULL Pointer Dereference","otherDetail":[{"key":"description","value":"Return value of function which returns null is dereferenced without checking"},{"key":"remediation","value":"Potential mitigations include the following:\n  1. If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\n  2. The choice could be made to use a language that is not susceptible to these issues.\n  3. Check the results of all functions that return a value and verify that the value is non-null before acting upon it.\n  4. Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\n  5. Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n  6. Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}]}},"attributes":[{"key":"cwe","value":"CWE-476"},{"key":"coverity-events","value":"ee3ad9f5719ebb4fd74428bcd195bb6e002ef4258fd7bcf50b1d46d9c7a7fb24"},{"key":"severity","value":"medium"},{"key":"language","value":"Java"},{"key":"filename","value":"RestartLessonService.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/container/service/RestartLessonService.java"},{"key":"local-effect","value":"If the function actually returns a null value, a NullPointerException will be thrown."},{"key":"line-number","value":62}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAYQ==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e45-600e-8dbc-b9fd2a4aeebe?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e45-600e-8dbc-b9fd2a4aeebe/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efa0b5e-3e45-600e-8dbc-b9fd2a4aeebe/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c23-aa88-0957c69c94a5","familyId":"CE003D627580786321D2C924A29E2707","familyKey":"6622fa92499daf116b86f66d0a130a9d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"e5bb51abbddde85fac6d317aa2b6002f1180e7c5c41f01d6132ef80b046a7f4f"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson9.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":98}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAYg==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c23-aa88-0957c69c94a5?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c23-aa88-0957c69c94a5/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c23-aa88-0957c69c94a5/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c22-aa88-bb2480039947","familyId":"CE003D627580786321D2C924A29E2707","familyKey":"6622fa92499daf116b86f66d0a130a9d","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"631581d2-5b2e-97dc-2098-08a8483ba8a4","name":"resource_leak|java","_localized":{"name":"Improper Resource Shutdown or Release","otherDetail":[{"key":"description","value":"Leak of a system resource"},{"key":"remediation","value":"The application must shut down or close any opened resource (such as a database connection, file handle, or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases, including when exceptions occur.\n\nWhere possible, it is recommended to use the dispose pattern provided by the language or framework in question, e.g., the \"using\" statement in C# or the \"try-with-resources\" statement in Java to ensure a disposable or closeable object is disposed or closed on all paths exiting a block, including exception cases. Otherwise, calling \"Dispose\" (C#) or \"close\" (Java) in a \"finally\" block is equally effective but more verbose and prone to mistakes."}]}},"attributes":[{"key":"cwe","value":"CWE-404"},{"key":"coverity-events","value":"e582bea7777281ad88eb5fc2ef191afbd6fca92e1130f81ce0f5086b45555b8a"},{"key":"severity","value":"high"},{"key":"language","value":"Java"},{"key":"filename","value":"SqlInjectionLesson9.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java"},{"key":"local-effect","value":"The system resource will not be reclaimed and reused, reducing the future availability of the resource."},{"key":"line-number","value":94}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAYw==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c22-aa88-bb2480039947?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c22-aa88-bb2480039947/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c22-aa88-bb2480039947/assist?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"issue-assist","method":"GET"}]},{"id":"1efb84f8-4fe4-6c55-aa88-1dcc06084fe3","familyId":"642611F38999D63A3D5DA2271E23628B","familyKey":"6631381ba228504d24f997ef6000ddb6","uploadSet":"e7024152-741d-40ed-8590-f5c1134b87a9","type":{"id":"af9cecff-efbc-380a-cd24-1463276609c0","name":"sigma.hardcoded_secret:pattern_low|java","_localized":{"name":"Use of Hard-coded Credentials","otherDetail":[{"key":"description","value":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},{"key":"remediation","value":"Potential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."}]}},"attributes":[{"key":"cwe","value":"CWE-798"},{"key":"coverity-events","value":"78074a8f4d680fd2379d5174e9179abc2afd07f59feb399365968721b517df63"},{"key":"severity","value":"low"},{"key":"language","value":"Java"},{"key":"filename","value":"XOREncodingAssignment.java"},{"key":"location","value":"src/main/java/org/owasp/webgoat/lessons/cryptography/XOREncodingAssignment.java"},{"key":"local-effect","value":""},{"key":"line-number","value":43}],"tenantId":"e1279832-8f57-4877-8dac-5397b61106ac","_cursor":"AAAAZA==","_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c55-aa88-1dcc06084fe3?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_includeAttributes=true","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/1efb84f8-4fe4-6c55-aa88-1dcc06084fe3/snippet?portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f","rel":"snippet","method":"GET"}]}],"_links":[{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/_actions/list?testId=latest&_offset=0&_limit=100&_includeAttributes=true&portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_first=100","rel":"self","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/_actions/list?testId=latest&_offset=0&_limit=100&_includeAttributes=true&portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_first=100","rel":"first","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/_actions/list?testId=latest&_offset=0&_limit=100&_includeAttributes=true&portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_last=100","rel":"last","method":"GET"},{"href":"https://poc.polaris.blackduck.com/api/specialization-layer-service/issues/_actions/list?testId=latest&_offset=0&_limit=100&_includeAttributes=true&portfolioSubItemId=19e77822-f26e-4766-bc97-65133299fa1f&_cursor=AAAAZA%3D%3D&_first=100","rel":"next","method":"GET"}],"_collection":{"itemCount":299,"currentPage":1,"pageCount":3}}
